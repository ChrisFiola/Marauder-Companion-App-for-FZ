#include <applications/services/bt/bt_service/bt.h>
#include <applications/services/cli/cli.h>
#include <applications/services/cli/cli_vcp.h>
#include <applications/services/dialogs/dialogs.h>
#include <applications/services/dolphin/dolphin.h>
#include <applications/services/gui/canvas_i.h>
#include <applications/services/gui/elements.h>
#include <applications/services/gui/gui.h>
#include <applications/services/gui/icon_i.h>
#include <applications/services/gui/modules/button_menu.h>
#include <applications/services/gui/modules/button_panel.h>
#include <applications/services/gui/modules/byte_input.h>
#include <applications/services/gui/modules/dialog_ex.h>
#include <applications/services/gui/modules/empty_screen.h>
#include <applications/services/gui/modules/file_browser.h>
#include <applications/services/gui/modules/file_browser_worker.h>
#include <applications/services/gui/modules/loading.h>
#include <applications/services/gui/modules/menu.h>
#include <applications/services/gui/modules/popup.h>
#include <applications/services/gui/modules/submenu.h>
#include <applications/services/gui/modules/text_box.h>
#include <applications/services/gui/modules/text_input.h>
#include <applications/services/gui/modules/validators.h>
#include <applications/services/gui/modules/variable_item_list.h>
#include <applications/services/gui/modules/widget.h>
#include <applications/services/gui/modules/widget_elements/widget_element.h>
#include <applications/services/gui/view_dispatcher.h>
#include <applications/services/gui/view_stack.h>
#include <applications/services/input/input.h>
#include <applications/services/loader/loader.h>
#include <applications/services/locale/locale.h>
#include <applications/services/notification/notification.h>
#include <applications/services/notification/notification_messages.h>
#include <applications/services/power/power_service/power.h>
#include <applications/services/rpc/rpc_app.h>
#include <applications/services/storage/storage.h>
#include <firmware/targets/f7/furi_hal/furi_hal_clock.h>
#include <firmware/targets/f7/furi_hal/furi_hal_console.h>
#include <firmware/targets/f7/furi_hal/furi_hal_flash.h>
#include <firmware/targets/f7/furi_hal/furi_hal_gpio.h>
#include <firmware/targets/f7/furi_hal/furi_hal_i2c_config.h>
#include <firmware/targets/f7/furi_hal/furi_hal_i2c_types.h>
#include <firmware/targets/f7/furi_hal/furi_hal_idle_timer.h>
#include <firmware/targets/f7/furi_hal/furi_hal_interrupt.h>
#include <firmware/targets/f7/furi_hal/furi_hal_os.h>
#include <firmware/targets/f7/furi_hal/furi_hal_pwm.h>
#include <firmware/targets/f7/furi_hal/furi_hal_resources.h>
#include <firmware/targets/f7/furi_hal/furi_hal_spi_config.h>
#include <firmware/targets/f7/furi_hal/furi_hal_spi_types.h>
#include <firmware/targets/f7/furi_hal/furi_hal_subghz_configs.h>
#include <firmware/targets/f7/furi_hal/furi_hal_uart.h>
#include <firmware/targets/f7/furi_hal/furi_hal_usb_cdc.h>
#include <firmware/targets/f7/platform_specific/intrinsic_export.h>
#include <firmware/targets/furi_hal_include/furi_hal.h>
#include <firmware/targets/furi_hal_include/furi_hal_bt.h>
#include <firmware/targets/furi_hal_include/furi_hal_bt_hid.h>
#include <firmware/targets/furi_hal_include/furi_hal_bt_serial.h>
#include <firmware/targets/furi_hal_include/furi_hal_compress.h>
#include <firmware/targets/furi_hal_include/furi_hal_cortex.h>
#include <firmware/targets/furi_hal_include/furi_hal_crypto.h>
#include <firmware/targets/furi_hal_include/furi_hal_debug.h>
#include <firmware/targets/furi_hal_include/furi_hal_i2c.h>
#include <firmware/targets/furi_hal_include/furi_hal_ibutton.h>
#include <firmware/targets/furi_hal_include/furi_hal_info.h>
#include <firmware/targets/furi_hal_include/furi_hal_infrared.h>
#include <firmware/targets/furi_hal_include/furi_hal_light.h>
#include <firmware/targets/furi_hal_include/furi_hal_memory.h>
#include <firmware/targets/furi_hal_include/furi_hal_mpu.h>
#include <firmware/targets/furi_hal_include/furi_hal_nfc.h>
#include <firmware/targets/furi_hal_include/furi_hal_power.h>
#include <firmware/targets/furi_hal_include/furi_hal_random.h>
#include <firmware/targets/furi_hal_include/furi_hal_region.h>
#include <firmware/targets/furi_hal_include/furi_hal_rfid.h>
#include <firmware/targets/furi_hal_include/furi_hal_rtc.h>
#include <firmware/targets/furi_hal_include/furi_hal_sd.h>
#include <firmware/targets/furi_hal_include/furi_hal_speaker.h>
#include <firmware/targets/furi_hal_include/furi_hal_spi.h>
#include <firmware/targets/furi_hal_include/furi_hal_subghz.h>
#include <firmware/targets/furi_hal_include/furi_hal_usb.h>
#include <firmware/targets/furi_hal_include/furi_hal_usb_hid.h>
#include <firmware/targets/furi_hal_include/furi_hal_usb_hid_u2f.h>
#include <firmware/targets/furi_hal_include/furi_hal_version.h>
#include <firmware/targets/furi_hal_include/furi_hal_vibro.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_adc.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_comp.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_cortex.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_crc.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_crs.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_dma.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_dmamux.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_exti.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_gpio.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_hsem.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_i2c.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_ipcc.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_iwdg.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_lptim.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_lpuart.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_pka.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_pwr.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rng.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rtc.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_spi.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_system.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_tim.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_utils.h>
#include <lib/STM32CubeWB/Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_wwdg.h>
#include <lib/STM32CubeWB/Middlewares/Third_Party/FreeRTOS/Source/include/stream_buffer.h>
#include <lib/flipper_application/flipper_application.h>
#include <lib/flipper_format/flipper_format.h>
#include <lib/flipper_format/flipper_format_i.h>
#include <lib/infrared/encoder_decoder/infrared.h>
#include <lib/infrared/worker/infrared_transmit.h>
#include <lib/infrared/worker/infrared_worker.h>
#include <lib/lfrfid/lfrfid_dict_file.h>
#include <lib/lfrfid/lfrfid_raw_file.h>
#include <lib/lfrfid/lfrfid_raw_worker.h>
#include <lib/lfrfid/lfrfid_worker.h>
#include <lib/lfrfid/protocols/lfrfid_protocols.h>
#include <lib/lfrfid/tools/bit_lib.h>
#include <lib/libusb_stm32/inc/hid_usage_button.h>
#include <lib/libusb_stm32/inc/hid_usage_consumer.h>
#include <lib/libusb_stm32/inc/hid_usage_desktop.h>
#include <lib/libusb_stm32/inc/hid_usage_device.h>
#include <lib/libusb_stm32/inc/hid_usage_game.h>
#include <lib/libusb_stm32/inc/hid_usage_keyboard.h>
#include <lib/libusb_stm32/inc/hid_usage_led.h>
#include <lib/libusb_stm32/inc/hid_usage_ordinal.h>
#include <lib/libusb_stm32/inc/hid_usage_power.h>
#include <lib/libusb_stm32/inc/hid_usage_simulation.h>
#include <lib/libusb_stm32/inc/hid_usage_sport.h>
#include <lib/libusb_stm32/inc/hid_usage_telephony.h>
#include <lib/libusb_stm32/inc/hid_usage_vr.h>
#include <lib/libusb_stm32/inc/usb.h>
#include <lib/libusb_stm32/inc/usb_cdc.h>
#include <lib/libusb_stm32/inc/usb_cdca.h>
#include <lib/libusb_stm32/inc/usb_cdce.h>
#include <lib/libusb_stm32/inc/usb_cdci.h>
#include <lib/libusb_stm32/inc/usb_cdcp.h>
#include <lib/libusb_stm32/inc/usb_cdcw.h>
#include <lib/libusb_stm32/inc/usb_dfu.h>
#include <lib/libusb_stm32/inc/usb_hid.h>
#include <lib/libusb_stm32/inc/usb_std.h>
#include <lib/libusb_stm32/inc/usb_tmc.h>
#include <lib/libusb_stm32/inc/usbd_core.h>
#include <lib/mbedtls/include/mbedtls/des.h>
#include <lib/mbedtls/include/mbedtls/sha1.h>
#include <lib/micro-ecc/uECC.h>
#include <lib/nfc/nfc_device.h>
#include <lib/one_wire/ibutton/ibutton_worker.h>
#include <lib/one_wire/maxim_crc.h>
#include <lib/one_wire/one_wire_device.h>
#include <lib/one_wire/one_wire_host.h>
#include <lib/one_wire/one_wire_host_timing.h>
#include <lib/one_wire/one_wire_slave.h>
#include <lib/print/wrappers.h>
#include <lib/subghz/blocks/const.h>
#include <lib/subghz/blocks/decoder.h>
#include <lib/subghz/blocks/encoder.h>
#include <lib/subghz/blocks/generic.h>
#include <lib/subghz/blocks/math.h>
#include <lib/subghz/environment.h>
#include <lib/subghz/protocols/protocol_items.h>
#include <lib/subghz/protocols/raw.h>
#include <lib/subghz/receiver.h>
#include <lib/subghz/registry.h>
#include <lib/subghz/subghz_setting.h>
#include <lib/subghz/subghz_tx_rx_worker.h>
#include <lib/subghz/subghz_worker.h>
#include <lib/subghz/transmitter.h>
#include <lib/toolbox/args.h>
#include <lib/toolbox/crc32_calc.h>
#include <lib/toolbox/dir_walk.h>
#include <lib/toolbox/float_tools.h>
#include <lib/toolbox/hmac_sha256.h>
#include <lib/toolbox/manchester_decoder.h>
#include <lib/toolbox/manchester_encoder.h>
#include <lib/toolbox/md5.h>
#include <lib/toolbox/path.h>
#include <lib/toolbox/protocols/protocol_dict.h>
#include <lib/toolbox/random_name.h>
#include <lib/toolbox/saved_struct.h>
#include <lib/toolbox/stream/buffered_file_stream.h>
#include <lib/toolbox/stream/file_stream.h>
#include <lib/toolbox/stream/stream.h>
#include <lib/toolbox/stream/string_stream.h>
#include <lib/toolbox/tar/tar_archive.h>
#include <lib/toolbox/value_index.h>
#include <lib/toolbox/version.h>
#include <lib/u8g2/u8g2.h>
const int elf_api_version = 720903;
static constexpr auto elf_api_table = sort(create_array_t<sym_entry>(
API_METHOD(LL_COMP_Init, ErrorStatus, (COMP_TypeDef*, LL_COMP_InitTypeDef*)),
API_METHOD(LL_DMA_DeInit, ErrorStatus, (DMA_TypeDef*, uint32_t)),
API_METHOD(LL_DMA_Init, ErrorStatus, (DMA_TypeDef*, uint32_t, LL_DMA_InitTypeDef*)),
API_METHOD(LL_GPIO_Init, ErrorStatus, (GPIO_TypeDef*, LL_GPIO_InitTypeDef*)),
API_METHOD(LL_I2C_Init, ErrorStatus, (I2C_TypeDef*, LL_I2C_InitTypeDef*)),
API_METHOD(LL_LPTIM_DeInit, ErrorStatus, (LPTIM_TypeDef*)),
API_METHOD(LL_LPTIM_Init, ErrorStatus, (LPTIM_TypeDef*, LL_LPTIM_InitTypeDef*)),
API_METHOD(LL_LPUART_Init, ErrorStatus, (USART_TypeDef*, LL_LPUART_InitTypeDef*)),
API_METHOD(LL_RCC_GetLPUARTClockFreq, uint32_t, (uint32_t)),
API_METHOD(LL_RCC_GetUSARTClockFreq, uint32_t, (uint32_t)),
API_METHOD(LL_RTC_EnterInitMode, ErrorStatus, (RTC_TypeDef*)),
API_METHOD(LL_RTC_Init, ErrorStatus, (RTC_TypeDef*, LL_RTC_InitTypeDef*)),
API_METHOD(LL_SPI_Init, ErrorStatus, (SPI_TypeDef*, LL_SPI_InitTypeDef*)),
API_METHOD(LL_SetSystemCoreClock, void, (uint32_t)),
API_METHOD(LL_TIM_DeInit, ErrorStatus, (TIM_TypeDef*)),
API_METHOD(LL_TIM_Init, ErrorStatus, (TIM_TypeDef*, LL_TIM_InitTypeDef*)),
API_METHOD(LL_TIM_OC_Init, ErrorStatus, (TIM_TypeDef*, uint32_t, LL_TIM_OC_InitTypeDef*)),
API_METHOD(LL_USART_Init, ErrorStatus, (USART_TypeDef*, LL_USART_InitTypeDef*)),
API_METHOD(__assert_func, void, (const char*, int, const char*, const char*)),
API_METHOD(__clear_cache, void, (void*, void*)),
API_METHOD(__errno, int*, ()),
API_METHOD(__furi_crash, void, ()),
API_METHOD(__furi_halt, void, ()),
API_METHOD(__retarget_lock_acquire, void, (_LOCK_T)),
API_METHOD(__retarget_lock_acquire_recursive, void, (_LOCK_T)),
API_METHOD(__retarget_lock_close_recursive, void, (_LOCK_T)),
API_METHOD(__retarget_lock_init_recursive, void, (_LOCK_T*)),
API_METHOD(__retarget_lock_release, void, (_LOCK_T)),
API_METHOD(__retarget_lock_release_recursive, void, (_LOCK_T)),
API_METHOD(__wrap___assert, void, (const char*, int, const char*)),
API_METHOD(__wrap___assert_func, void, (const char*, int, const char*, const char*)),
API_METHOD(__wrap_fflush, int, (FILE*)),
API_METHOD(__wrap_printf, int, (const char*, ...)),
API_METHOD(__wrap_putc, int, (int, FILE*)),
API_METHOD(__wrap_putchar, int, (int)),
API_METHOD(__wrap_puts, int, (const char*)),
API_METHOD(__wrap_snprintf, int, (char*, size_t, const char*, ...)),
API_METHOD(__wrap_vsnprintf, int, (char*, size_t, const char*, va_list)),
API_METHOD(abort, void, ()),
API_METHOD(acquire_mutex, void*, (ValueMutex*, uint32_t)),
API_METHOD(aligned_free, void, (void*)),
API_METHOD(aligned_malloc, void*, (size_t, size_t)),
API_METHOD(args_char_to_hex, _Bool, (char, char, uint8_t*)),
API_METHOD(args_get_first_word_length, size_t, (FuriString*)),
API_METHOD(args_length, size_t, (FuriString*)),
API_METHOD(args_read_hex_bytes, _Bool, (FuriString*, uint8_t*, size_t)),
API_METHOD(args_read_int_and_trim, _Bool, (FuriString*, int*)),
API_METHOD(args_read_probably_quoted_string_and_trim, _Bool, (FuriString*, FuriString*)),
API_METHOD(args_read_string_and_trim, _Bool, (FuriString*, FuriString*)),
API_METHOD(atoi, int, (const char*)),
API_METHOD(bit_lib_add_parity, size_t, (const uint8_t*, size_t, uint8_t*, size_t, uint8_t, uint8_t, BitLibParity)),
API_METHOD(bit_lib_copy_bits, void, (uint8_t*, size_t, size_t, const uint8_t*, size_t)),
API_METHOD(bit_lib_crc16, uint16_t, (const uint8_t*, size_t, uint16_t, uint16_t, _Bool, _Bool, uint16_t)),
API_METHOD(bit_lib_crc8, uint16_t, (const uint8_t*, size_t, uint8_t, uint8_t, _Bool, _Bool, uint8_t)),
API_METHOD(bit_lib_get_bit, _Bool, (const uint8_t*, size_t)),
API_METHOD(bit_lib_get_bit_count, uint8_t, (uint32_t)),
API_METHOD(bit_lib_get_bits, uint8_t, (const uint8_t*, size_t, uint8_t)),
API_METHOD(bit_lib_get_bits_16, uint16_t, (const uint8_t*, size_t, uint8_t)),
API_METHOD(bit_lib_get_bits_32, uint32_t, (const uint8_t*, size_t, uint8_t)),
API_METHOD(bit_lib_print_bits, void, (const uint8_t*, size_t)),
API_METHOD(bit_lib_print_regions, void, (const BitLibRegion*, size_t, const uint8_t*, size_t)),
API_METHOD(bit_lib_push_bit, void, (uint8_t*, size_t, _Bool)),
API_METHOD(bit_lib_remove_bit_every_nth, size_t, (uint8_t*, size_t, uint8_t, uint8_t)),
API_METHOD(bit_lib_reverse_16_fast, uint16_t, (uint16_t)),
API_METHOD(bit_lib_reverse_8_fast, uint8_t, (uint8_t)),
API_METHOD(bit_lib_reverse_bits, void, (uint8_t*, size_t, uint8_t)),
API_METHOD(bit_lib_set_bit, void, (uint8_t*, size_t, _Bool)),
API_METHOD(bit_lib_set_bits, void, (uint8_t*, size_t, uint8_t, uint8_t)),
API_METHOD(bit_lib_test_parity, _Bool, (const uint8_t*, size_t, uint8_t, BitLibParity, uint8_t)),
API_METHOD(bit_lib_test_parity_32, _Bool, (uint32_t, BitLibParity)),
API_METHOD(ble_app_get_key_storage_buff, void, (uint8_t**, uint16_t*)),
API_METHOD(ble_app_init, _Bool, ()),
API_METHOD(ble_app_thread_stop, void, ()),
API_METHOD(ble_glue_force_c2_mode, BleGlueCommandResult, (BleGlueC2Mode)),
API_METHOD(ble_glue_get_c2_info, const BleGlueC2Info*, ()),
API_METHOD(ble_glue_init, void, ()),
API_METHOD(ble_glue_is_alive, _Bool, ()),
API_METHOD(ble_glue_is_radio_stack_ready, _Bool, ()),
API_METHOD(ble_glue_reinit_c2, _Bool, ()),
API_METHOD(ble_glue_set_key_storage_changed_callback, void, (BleGlueKeyStorageChangedCallback, void*)),
API_METHOD(ble_glue_start, _Bool, ()),
API_METHOD(ble_glue_thread_stop, void, ()),
API_METHOD(ble_glue_wait_for_c2_start, _Bool, (int32_t)),
API_METHOD(bt_disconnect, void, (Bt*)),
API_METHOD(bt_forget_bonded_devices, void, (Bt*)),
API_METHOD(bt_keys_storage_set_default_path, void, (Bt*)),
API_METHOD(bt_keys_storage_set_storage_path, void, (Bt*, const char*)),
API_METHOD(bt_set_profile, _Bool, (Bt*, BtProfile)),
API_METHOD(bt_set_status_changed_callback, void, (Bt*, BtStatusChangedCallback, void*)),
API_METHOD(buffered_file_stream_alloc, Stream*, (Storage*)),
API_METHOD(buffered_file_stream_close, _Bool, (Stream*)),
API_METHOD(buffered_file_stream_get_error, FS_Error, (Stream*)),
API_METHOD(buffered_file_stream_open, _Bool, (Stream*, const char*, FS_AccessMode, FS_OpenMode)),
API_METHOD(buffered_file_stream_sync, _Bool, (Stream*)),
API_METHOD(button_menu_add_item, ButtonMenuItem*, (ButtonMenu*, const char*, int32_t, ButtonMenuItemCallback, ButtonMenuItemType, void*)),
API_METHOD(button_menu_alloc, ButtonMenu*, ()),
API_METHOD(button_menu_free, void, (ButtonMenu*)),
API_METHOD(button_menu_get_view, View*, (ButtonMenu*)),
API_METHOD(button_menu_reset, void, (ButtonMenu*)),
API_METHOD(button_menu_set_header, void, (ButtonMenu*, const char*)),
API_METHOD(button_menu_set_selected_item, void, (ButtonMenu*, uint32_t)),
API_METHOD(button_panel_add_item, void, (ButtonPanel*, uint32_t, uint16_t, uint16_t, uint16_t, uint16_t, const Icon*, const Icon*, ButtonItemCallback, void*)),
API_METHOD(button_panel_add_label, void, (ButtonPanel*, uint16_t, uint16_t, Font, const char*)),
API_METHOD(button_panel_alloc, ButtonPanel*, ()),
API_METHOD(button_panel_free, void, (ButtonPanel*)),
API_METHOD(button_panel_get_view, View*, (ButtonPanel*)),
API_METHOD(button_panel_reserve, void, (ButtonPanel*, size_t, size_t)),
API_METHOD(button_panel_reset, void, (ButtonPanel*)),
API_METHOD(button_panel_reset_selection, void, (ButtonPanel*)),
API_METHOD(byte_input_alloc, ByteInput*, ()),
API_METHOD(byte_input_free, void, (ByteInput*)),
API_METHOD(byte_input_get_view, View*, (ByteInput*)),
API_METHOD(byte_input_set_header_text, void, (ByteInput*, const char*)),
API_METHOD(byte_input_set_result_callback, void, (ByteInput*, ByteInputCallback, ByteChangedCallback, void*, uint8_t*, uint8_t)),
API_METHOD(canvas_clear, void, (Canvas*)),
API_METHOD(canvas_commit, void, (Canvas*)),
API_METHOD(canvas_current_font_height, uint8_t, (Canvas*)),
API_METHOD(canvas_draw_bitmap, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t, const uint8_t*)),
API_METHOD(canvas_draw_box, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(canvas_draw_circle, void, (Canvas*, uint8_t, uint8_t, uint8_t)),
API_METHOD(canvas_draw_disc, void, (Canvas*, uint8_t, uint8_t, uint8_t)),
API_METHOD(canvas_draw_dot, void, (Canvas*, uint8_t, uint8_t)),
API_METHOD(canvas_draw_frame, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(canvas_draw_glyph, void, (Canvas*, uint8_t, uint8_t, uint16_t)),
API_METHOD(canvas_draw_icon, void, (Canvas*, uint8_t, uint8_t, const Icon*)),
API_METHOD(canvas_draw_icon_animation, void, (Canvas*, uint8_t, uint8_t, IconAnimation*)),
API_METHOD(canvas_draw_icon_bitmap, void, (Canvas*, uint8_t, uint8_t, int16_t, int16_t, const Icon*)),
API_METHOD(canvas_draw_line, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(canvas_draw_rbox, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(canvas_draw_rframe, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(canvas_draw_str, void, (Canvas*, uint8_t, uint8_t, const char*)),
API_METHOD(canvas_draw_str_aligned, void, (Canvas*, uint8_t, uint8_t, Align, Align, const char*)),
API_METHOD(canvas_draw_triangle, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t, CanvasDirection)),
API_METHOD(canvas_draw_xbm, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t, const uint8_t*)),
API_METHOD(canvas_get_buffer, uint8_t*, (Canvas*)),
API_METHOD(canvas_get_buffer_size, size_t, (Canvas*)),
API_METHOD(canvas_get_font_params, CanvasFontParameters*, (Canvas*, Font)),
API_METHOD(canvas_glyph_width, uint8_t, (Canvas*, char)),
API_METHOD(canvas_height, uint8_t, (Canvas*)),
API_METHOD(canvas_invert_color, void, (Canvas*)),
API_METHOD(canvas_reset, void, (Canvas*)),
API_METHOD(canvas_set_bitmap_mode, void, (Canvas*, _Bool)),
API_METHOD(canvas_set_color, void, (Canvas*, Color)),
API_METHOD(canvas_set_font, void, (Canvas*, Font)),
API_METHOD(canvas_set_font_direction, void, (Canvas*, CanvasDirection)),
API_METHOD(canvas_string_width, uint16_t, (Canvas*, const char*)),
API_METHOD(canvas_width, uint8_t, (Canvas*)),
API_METHOD(cc1101_calibrate, void, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_flush_rx, void, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_flush_tx, void, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_get_rssi, uint8_t, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_get_status, CC1101Status, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_read_fifo, uint8_t, (FuriHalSpiBusHandle*, uint8_t*, uint8_t*)),
API_METHOD(cc1101_read_reg, CC1101Status, (FuriHalSpiBusHandle*, uint8_t, uint8_t*)),
API_METHOD(cc1101_reset, void, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_set_frequency, uint32_t, (FuriHalSpiBusHandle*, uint32_t)),
API_METHOD(cc1101_set_pa_table, void, (FuriHalSpiBusHandle*, const uint8_t[8])),
API_METHOD(cc1101_shutdown, void, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_strobe, CC1101Status, (FuriHalSpiBusHandle*, uint8_t)),
API_METHOD(cc1101_switch_to_idle, void, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_switch_to_rx, void, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_switch_to_tx, void, (FuriHalSpiBusHandle*)),
API_METHOD(cc1101_write_fifo, uint8_t, (FuriHalSpiBusHandle*, const uint8_t*, uint8_t)),
API_METHOD(cc1101_write_reg, CC1101Status, (FuriHalSpiBusHandle*, uint8_t, uint8_t)),
API_METHOD(cli_add_command, void, (Cli*, const char*, CliCommandFlag, CliCallback, void*)),
API_METHOD(cli_cmd_interrupt_received, _Bool, (Cli*)),
API_METHOD(cli_delete_command, void, (Cli*, const char*)),
API_METHOD(cli_getc, char, (Cli*)),
API_METHOD(cli_is_connected, _Bool, (Cli*)),
API_METHOD(cli_nl, void, ()),
API_METHOD(cli_print_usage, void, (const char*, const char*, const char*)),
API_METHOD(cli_read, size_t, (Cli*, uint8_t*, size_t)),
API_METHOD(cli_read_timeout, size_t, (Cli*, uint8_t*, size_t, uint32_t)),
API_METHOD(cli_session_close, void, (Cli*)),
API_METHOD(cli_session_open, void, (Cli*, void*)),
API_METHOD(cli_write, void, (Cli*, const uint8_t*, size_t)),
API_METHOD(crc32_calc_buffer, uint32_t, (uint32_t, const void*, size_t)),
API_METHOD(crc32_calc_file, uint32_t, (File*, const FileCrcProgressCb, void*)),
API_METHOD(delete_mutex, _Bool, (ValueMutex*)),
API_METHOD(dialog_ex_alloc, DialogEx*, ()),
API_METHOD(dialog_ex_disable_extended_events, void, (DialogEx*)),
API_METHOD(dialog_ex_enable_extended_events, void, (DialogEx*)),
API_METHOD(dialog_ex_free, void, (DialogEx*)),
API_METHOD(dialog_ex_get_view, View*, (DialogEx*)),
API_METHOD(dialog_ex_reset, void, (DialogEx*)),
API_METHOD(dialog_ex_set_center_button_text, void, (DialogEx*, const char*)),
API_METHOD(dialog_ex_set_context, void, (DialogEx*, void*)),
API_METHOD(dialog_ex_set_header, void, (DialogEx*, const char*, uint8_t, uint8_t, Align, Align)),
API_METHOD(dialog_ex_set_icon, void, (DialogEx*, uint8_t, uint8_t, const Icon*)),
API_METHOD(dialog_ex_set_left_button_text, void, (DialogEx*, const char*)),
API_METHOD(dialog_ex_set_result_callback, void, (DialogEx*, DialogExResultCallback)),
API_METHOD(dialog_ex_set_right_button_text, void, (DialogEx*, const char*)),
API_METHOD(dialog_ex_set_text, void, (DialogEx*, const char*, uint8_t, uint8_t, Align, Align)),
API_METHOD(dialog_file_browser_set_basic_options, void, (DialogsFileBrowserOptions*, const char*, const Icon*)),
API_METHOD(dialog_file_browser_show, _Bool, (DialogsApp*, FuriString*, FuriString*, const DialogsFileBrowserOptions*)),
API_METHOD(dialog_message_alloc, DialogMessage*, ()),
API_METHOD(dialog_message_free, void, (DialogMessage*)),
API_METHOD(dialog_message_set_buttons, void, (DialogMessage*, const char*, const char*, const char*)),
API_METHOD(dialog_message_set_header, void, (DialogMessage*, const char*, uint8_t, uint8_t, Align, Align)),
API_METHOD(dialog_message_set_icon, void, (DialogMessage*, const Icon*, uint8_t, uint8_t)),
API_METHOD(dialog_message_set_text, void, (DialogMessage*, const char*, uint8_t, uint8_t, Align, Align)),
API_METHOD(dialog_message_show, DialogMessageButton, (DialogsApp*, const DialogMessage*)),
API_METHOD(dialog_message_show_storage_error, void, (DialogsApp*, const char*)),
API_METHOD(dir_walk_alloc, DirWalk*, (Storage*)),
API_METHOD(dir_walk_close, void, (DirWalk*)),
API_METHOD(dir_walk_free, void, (DirWalk*)),
API_METHOD(dir_walk_get_error, FS_Error, (DirWalk*)),
API_METHOD(dir_walk_open, _Bool, (DirWalk*, const char*)),
API_METHOD(dir_walk_read, DirWalkResult, (DirWalk*, FuriString*, FileInfo*)),
API_METHOD(dir_walk_set_filter_cb, void, (DirWalk*, DirWalkFilterCb, void*)),
API_METHOD(dir_walk_set_recursive, void, (DirWalk*, _Bool)),
API_METHOD(dolphin_deed, void, (Dolphin*, DolphinDeed)),
API_METHOD(dolphin_deed_get_app, DolphinApp, (DolphinDeed)),
API_METHOD(dolphin_deed_get_app_limit, uint8_t, (DolphinApp)),
API_METHOD(dolphin_deed_get_weight, uint8_t, (DolphinDeed)),
API_METHOD(dolphin_flush, void, (Dolphin*)),
API_METHOD(dolphin_get_pubsub, FuriPubSub*, (Dolphin*)),
API_METHOD(dolphin_stats, DolphinStats, (Dolphin*)),
API_METHOD(dolphin_upgrade_level, void, (Dolphin*)),
API_METHOD(elements_bold_rounded_frame, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(elements_bubble, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(elements_bubble_str, void, (Canvas*, uint8_t, uint8_t, const char*, Align, Align)),
API_METHOD(elements_button_center, void, (Canvas*, const char*)),
API_METHOD(elements_button_left, void, (Canvas*, const char*)),
API_METHOD(elements_button_right, void, (Canvas*, const char*)),
API_METHOD(elements_frame, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(elements_multiline_text, void, (Canvas*, uint8_t, uint8_t, const char*)),
API_METHOD(elements_multiline_text_aligned, void, (Canvas*, uint8_t, uint8_t, Align, Align, const char*)),
API_METHOD(elements_multiline_text_framed, void, (Canvas*, uint8_t, uint8_t, const char*)),
API_METHOD(elements_progress_bar, void, (Canvas*, uint8_t, uint8_t, uint8_t, float)),
API_METHOD(elements_progress_bar_with_text, void, (Canvas*, uint8_t, uint8_t, uint8_t, float, const char*)),
API_METHOD(elements_scrollable_text_line, void, (Canvas*, uint8_t, uint8_t, uint8_t, FuriString*, size_t, _Bool)),
API_METHOD(elements_scrollbar, void, (Canvas*, uint16_t, uint16_t)),
API_METHOD(elements_scrollbar_pos, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t)),
API_METHOD(elements_slightly_rounded_box, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(elements_slightly_rounded_frame, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(elements_string_fit_width, void, (Canvas*, FuriString*, uint8_t)),
API_METHOD(elements_text_box, void, (Canvas*, uint8_t, uint8_t, uint8_t, uint8_t, Align, Align, const char*, _Bool)),
API_METHOD(empty_screen_alloc, EmptyScreen*, ()),
API_METHOD(empty_screen_free, void, (EmptyScreen*)),
API_METHOD(empty_screen_get_view, View*, (EmptyScreen*)),
API_METHOD(file_browser_alloc, FileBrowser*, (FuriString*)),
API_METHOD(file_browser_configure, void, (FileBrowser*, const char*, const char*, _Bool, _Bool, const Icon*, _Bool)),
API_METHOD(file_browser_free, void, (FileBrowser*)),
API_METHOD(file_browser_get_view, View*, (FileBrowser*)),
API_METHOD(file_browser_set_callback, void, (FileBrowser*, FileBrowserCallback, void*)),
API_METHOD(file_browser_set_item_callback, void, (FileBrowser*, FileBrowserLoadItemCallback, void*)),
API_METHOD(file_browser_start, void, (FileBrowser*, FuriString*)),
API_METHOD(file_browser_stop, void, (FileBrowser*)),
API_METHOD(file_browser_worker_alloc, BrowserWorker*, (FuriString*, const char*, const char*, _Bool, _Bool)),
API_METHOD(file_browser_worker_folder_enter, void, (BrowserWorker*, FuriString*, int32_t)),
API_METHOD(file_browser_worker_folder_exit, void, (BrowserWorker*)),
API_METHOD(file_browser_worker_folder_refresh, void, (BrowserWorker*, int32_t)),
API_METHOD(file_browser_worker_free, void, (BrowserWorker*)),
API_METHOD(file_browser_worker_is_in_start_folder, _Bool, (BrowserWorker*)),
API_METHOD(file_browser_worker_load, void, (BrowserWorker*, uint32_t, uint32_t)),
API_METHOD(file_browser_worker_set_callback_context, void, (BrowserWorker*, void*)),
API_METHOD(file_browser_worker_set_config, void, (BrowserWorker*, FuriString*, const char*, _Bool, _Bool)),
API_METHOD(file_browser_worker_set_folder_callback, void, (BrowserWorker*, BrowserWorkerFolderOpenCallback)),
API_METHOD(file_browser_worker_set_item_callback, void, (BrowserWorker*, BrowserWorkerListItemCallback)),
API_METHOD(file_browser_worker_set_list_callback, void, (BrowserWorker*, BrowserWorkerListLoadCallback)),
API_METHOD(file_browser_worker_set_long_load_callback, void, (BrowserWorker*, BrowserWorkerLongLoadCallback)),
API_METHOD(file_stream_alloc, Stream*, (Storage*)),
API_METHOD(file_stream_close, _Bool, (Stream*)),
API_METHOD(file_stream_get_error, FS_Error, (Stream*)),
API_METHOD(file_stream_open, _Bool, (Stream*, const char*, FS_AccessMode, FS_OpenMode)),
API_METHOD(filesystem_api_error_get_desc, const char*, (FS_Error)),
API_METHOD(flipper_application_alloc, FlipperApplication*, (Storage*, const ElfApiInterface*)),
API_METHOD(flipper_application_free, void, (FlipperApplication*)),
API_METHOD(flipper_application_get_manifest, const FlipperApplicationManifest*, (FlipperApplication*)),
API_METHOD(flipper_application_load_status_to_string, const char*, (FlipperApplicationLoadStatus)),
API_METHOD(flipper_application_manifest_is_compatible, _Bool, (const FlipperApplicationManifest*, const ElfApiInterface*)),
API_METHOD(flipper_application_manifest_is_valid, _Bool, (const FlipperApplicationManifest*)),
API_METHOD(flipper_application_map_to_memory, FlipperApplicationLoadStatus, (FlipperApplication*)),
API_METHOD(flipper_application_preload, FlipperApplicationPreloadStatus, (FlipperApplication*, const char*)),
API_METHOD(flipper_application_preload_manifest, FlipperApplicationPreloadStatus, (FlipperApplication*, const char*)),
API_METHOD(flipper_application_spawn, FuriThread*, (FlipperApplication*, void*)),
API_METHOD(flipper_format_buffered_file_alloc, FlipperFormat*, (Storage*)),
API_METHOD(flipper_format_buffered_file_close, _Bool, (FlipperFormat*)),
API_METHOD(flipper_format_buffered_file_open_existing, _Bool, (FlipperFormat*, const char*)),
API_METHOD(flipper_format_delete_key, _Bool, (FlipperFormat*, const char*)),
API_METHOD(flipper_format_file_alloc, FlipperFormat*, (Storage*)),
API_METHOD(flipper_format_file_close, _Bool, (FlipperFormat*)),
API_METHOD(flipper_format_file_open_always, _Bool, (FlipperFormat*, const char*)),
API_METHOD(flipper_format_file_open_append, _Bool, (FlipperFormat*, const char*)),
API_METHOD(flipper_format_file_open_existing, _Bool, (FlipperFormat*, const char*)),
API_METHOD(flipper_format_file_open_new, _Bool, (FlipperFormat*, const char*)),
API_METHOD(flipper_format_free, void, (FlipperFormat*)),
API_METHOD(flipper_format_get_raw_stream, Stream*, (FlipperFormat*)),
API_METHOD(flipper_format_get_value_count, _Bool, (FlipperFormat*, const char*, uint32_t*)),
API_METHOD(flipper_format_insert_or_update_bool, _Bool, (FlipperFormat*, const char*, const _Bool*, const uint16_t)),
API_METHOD(flipper_format_insert_or_update_float, _Bool, (FlipperFormat*, const char*, const float*, const uint16_t)),
API_METHOD(flipper_format_insert_or_update_hex, _Bool, (FlipperFormat*, const char*, const uint8_t*, const uint16_t)),
API_METHOD(flipper_format_insert_or_update_int32, _Bool, (FlipperFormat*, const char*, const int32_t*, const uint16_t)),
API_METHOD(flipper_format_insert_or_update_string, _Bool, (FlipperFormat*, const char*, FuriString*)),
API_METHOD(flipper_format_insert_or_update_string_cstr, _Bool, (FlipperFormat*, const char*, const char*)),
API_METHOD(flipper_format_insert_or_update_uint32, _Bool, (FlipperFormat*, const char*, const uint32_t*, const uint16_t)),
API_METHOD(flipper_format_key_exist, _Bool, (FlipperFormat*, const char*)),
API_METHOD(flipper_format_read_bool, _Bool, (FlipperFormat*, const char*, _Bool*, const uint16_t)),
API_METHOD(flipper_format_read_float, _Bool, (FlipperFormat*, const char*, float*, const uint16_t)),
API_METHOD(flipper_format_read_header, _Bool, (FlipperFormat*, FuriString*, uint32_t*)),
API_METHOD(flipper_format_read_hex, _Bool, (FlipperFormat*, const char*, uint8_t*, const uint16_t)),
API_METHOD(flipper_format_read_hex_uint64, _Bool, (FlipperFormat*, const char*, uint64_t*, const uint16_t)),
API_METHOD(flipper_format_read_int32, _Bool, (FlipperFormat*, const char*, int32_t*, const uint16_t)),
API_METHOD(flipper_format_read_string, _Bool, (FlipperFormat*, const char*, FuriString*)),
API_METHOD(flipper_format_read_uint32, _Bool, (FlipperFormat*, const char*, uint32_t*, const uint16_t)),
API_METHOD(flipper_format_rewind, _Bool, (FlipperFormat*)),
API_METHOD(flipper_format_seek_to_end, _Bool, (FlipperFormat*)),
API_METHOD(flipper_format_set_strict_mode, void, (FlipperFormat*, _Bool)),
API_METHOD(flipper_format_string_alloc, FlipperFormat*, ()),
API_METHOD(flipper_format_update_bool, _Bool, (FlipperFormat*, const char*, const _Bool*, const uint16_t)),
API_METHOD(flipper_format_update_float, _Bool, (FlipperFormat*, const char*, const float*, const uint16_t)),
API_METHOD(flipper_format_update_hex, _Bool, (FlipperFormat*, const char*, const uint8_t*, const uint16_t)),
API_METHOD(flipper_format_update_int32, _Bool, (FlipperFormat*, const char*, const int32_t*, const uint16_t)),
API_METHOD(flipper_format_update_string, _Bool, (FlipperFormat*, const char*, FuriString*)),
API_METHOD(flipper_format_update_string_cstr, _Bool, (FlipperFormat*, const char*, const char*)),
API_METHOD(flipper_format_update_uint32, _Bool, (FlipperFormat*, const char*, const uint32_t*, const uint16_t)),
API_METHOD(flipper_format_write_bool, _Bool, (FlipperFormat*, const char*, const _Bool*, const uint16_t)),
API_METHOD(flipper_format_write_comment, _Bool, (FlipperFormat*, FuriString*)),
API_METHOD(flipper_format_write_comment_cstr, _Bool, (FlipperFormat*, const char*)),
API_METHOD(flipper_format_write_float, _Bool, (FlipperFormat*, const char*, const float*, const uint16_t)),
API_METHOD(flipper_format_write_header, _Bool, (FlipperFormat*, FuriString*, const uint32_t)),
API_METHOD(flipper_format_write_header_cstr, _Bool, (FlipperFormat*, const char*, const uint32_t)),
API_METHOD(flipper_format_write_hex, _Bool, (FlipperFormat*, const char*, const uint8_t*, const uint16_t)),
API_METHOD(flipper_format_write_hex_uint64, _Bool, (FlipperFormat*, const char*, const uint64_t*, const uint16_t)),
API_METHOD(flipper_format_write_int32, _Bool, (FlipperFormat*, const char*, const int32_t*, const uint16_t)),
API_METHOD(flipper_format_write_string, _Bool, (FlipperFormat*, const char*, FuriString*)),
API_METHOD(flipper_format_write_string_cstr, _Bool, (FlipperFormat*, const char*, const char*)),
API_METHOD(flipper_format_write_uint32, _Bool, (FlipperFormat*, const char*, const uint32_t*, const uint16_t)),
API_METHOD(float_is_equal, _Bool, (float, float)),
API_METHOD(free, void, (void*)),
API_METHOD(furi_delay_ms, void, (uint32_t)),
API_METHOD(furi_delay_tick, void, (uint32_t)),
API_METHOD(furi_delay_until_tick, FuriStatus, (uint32_t)),
API_METHOD(furi_delay_us, void, (uint32_t)),
API_METHOD(furi_event_flag_alloc, FuriEventFlag*, ()),
API_METHOD(furi_event_flag_clear, uint32_t, (FuriEventFlag*, uint32_t)),
API_METHOD(furi_event_flag_free, void, (FuriEventFlag*)),
API_METHOD(furi_event_flag_get, uint32_t, (FuriEventFlag*)),
API_METHOD(furi_event_flag_set, uint32_t, (FuriEventFlag*, uint32_t)),
API_METHOD(furi_event_flag_wait, uint32_t, (FuriEventFlag*, uint32_t, uint32_t, uint32_t)),
API_METHOD(furi_get_tick, uint32_t, ()),
API_METHOD(furi_hal_bt_change_app, _Bool, (FuriHalBtProfile, GapEventCallback, void*)),
API_METHOD(furi_hal_bt_clear_white_list, _Bool, ()),
API_METHOD(furi_hal_bt_dump_state, void, (FuriString*)),
API_METHOD(furi_hal_bt_ensure_c2_mode, _Bool, (BleGlueC2Mode)),
API_METHOD(furi_hal_bt_get_key_storage_buff, void, (uint8_t**, uint16_t*)),
API_METHOD(furi_hal_bt_get_radio_stack, FuriHalBtStack, ()),
API_METHOD(furi_hal_bt_get_rssi, float, ()),
API_METHOD(furi_hal_bt_get_transmitted_packets, uint32_t, ()),
API_METHOD(furi_hal_bt_hid_consumer_key_press, _Bool, (uint16_t)),
API_METHOD(furi_hal_bt_hid_consumer_key_release, _Bool, (uint16_t)),
API_METHOD(furi_hal_bt_hid_consumer_key_release_all, _Bool, ()),
API_METHOD(furi_hal_bt_hid_kb_press, _Bool, (uint16_t)),
API_METHOD(furi_hal_bt_hid_kb_release, _Bool, (uint16_t)),
API_METHOD(furi_hal_bt_hid_kb_release_all, _Bool, ()),
API_METHOD(furi_hal_bt_hid_mouse_move, _Bool, (int8_t, int8_t)),
API_METHOD(furi_hal_bt_hid_mouse_press, _Bool, (uint8_t)),
API_METHOD(furi_hal_bt_hid_mouse_release, _Bool, (uint8_t)),
API_METHOD(furi_hal_bt_hid_mouse_release_all, _Bool, ()),
API_METHOD(furi_hal_bt_hid_mouse_scroll, _Bool, (int8_t)),
API_METHOD(furi_hal_bt_hid_start, void, ()),
API_METHOD(furi_hal_bt_hid_stop, void, ()),
API_METHOD(furi_hal_bt_is_active, _Bool, ()),
API_METHOD(furi_hal_bt_is_alive, _Bool, ()),
API_METHOD(furi_hal_bt_is_ble_gatt_gap_supported, _Bool, ()),
API_METHOD(furi_hal_bt_is_testing_supported, _Bool, ()),
API_METHOD(furi_hal_bt_lock_core2, void, ()),
API_METHOD(furi_hal_bt_nvm_sram_sem_acquire, void, ()),
API_METHOD(furi_hal_bt_nvm_sram_sem_release, void, ()),
API_METHOD(furi_hal_bt_reinit, void, ()),
API_METHOD(furi_hal_bt_serial_notify_buffer_is_empty, void, ()),
API_METHOD(furi_hal_bt_serial_set_event_callback, void, (uint16_t, FuriHalBtSerialCallback, void*)),
API_METHOD(furi_hal_bt_serial_set_rpc_status, void, (FuriHalBtSerialRpcStatus)),
API_METHOD(furi_hal_bt_serial_start, void, ()),
API_METHOD(furi_hal_bt_serial_stop, void, ()),
API_METHOD(furi_hal_bt_serial_tx, _Bool, (uint8_t*, uint16_t)),
API_METHOD(furi_hal_bt_set_key_storage_change_callback, void, (BleGlueKeyStorageChangedCallback, void*)),
API_METHOD(furi_hal_bt_start_advertising, void, ()),
API_METHOD(furi_hal_bt_start_app, _Bool, (FuriHalBtProfile, GapEventCallback, void*)),
API_METHOD(furi_hal_bt_start_packet_rx, void, (uint8_t, uint8_t)),
API_METHOD(furi_hal_bt_start_packet_tx, void, (uint8_t, uint8_t, uint8_t)),
API_METHOD(furi_hal_bt_start_radio_stack, _Bool, ()),
API_METHOD(furi_hal_bt_start_rx, void, (uint8_t)),
API_METHOD(furi_hal_bt_start_tone_tx, void, (uint8_t, uint8_t)),
API_METHOD(furi_hal_bt_stop_advertising, void, ()),
API_METHOD(furi_hal_bt_stop_packet_test, uint16_t, ()),
API_METHOD(furi_hal_bt_stop_rx, void, ()),
API_METHOD(furi_hal_bt_stop_tone_tx, void, ()),
API_METHOD(furi_hal_bt_unlock_core2, void, ()),
API_METHOD(furi_hal_bt_update_battery_level, void, (uint8_t)),
API_METHOD(furi_hal_bt_update_power_state, void, ()),
API_METHOD(furi_hal_cdc_get_ctrl_line_state, uint8_t, (uint8_t)),
API_METHOD(furi_hal_cdc_get_port_settings, usb_cdc_line_coding*, (uint8_t)),
API_METHOD(furi_hal_cdc_receive, int32_t, (uint8_t, uint8_t*, uint16_t)),
API_METHOD(furi_hal_cdc_send, void, (uint8_t, uint8_t*, uint16_t)),
API_METHOD(furi_hal_cdc_set_callbacks, void, (uint8_t, CdcCallbacks*, void*)),
API_METHOD(furi_hal_clock_deinit_early, void, ()),
API_METHOD(furi_hal_clock_mco_disable, void, ()),
API_METHOD(furi_hal_clock_mco_enable, void, (FuriHalClockMcoSourceId, FuriHalClockMcoDivisorId)),
API_METHOD(furi_hal_console_disable, void, ()),
API_METHOD(furi_hal_console_enable, void, ()),
API_METHOD(furi_hal_console_init, void, ()),
API_METHOD(furi_hal_console_printf, void, (const char[], ...)),
API_METHOD(furi_hal_console_puts, void, (const char*)),
API_METHOD(furi_hal_console_set_tx_callback, void, (FuriHalConsoleTxCallback, void*)),
API_METHOD(furi_hal_console_tx, void, (const uint8_t*, size_t)),
API_METHOD(furi_hal_console_tx_with_new_line, void, (const uint8_t*, size_t)),
API_METHOD(furi_hal_cortex_delay_us, void, (uint32_t)),
API_METHOD(furi_hal_cortex_instructions_per_microsecond, uint32_t, ()),
API_METHOD(furi_hal_cortex_timer_get, FuriHalCortexTimer, (uint32_t)),
API_METHOD(furi_hal_cortex_timer_is_expired, _Bool, (FuriHalCortexTimer)),
API_METHOD(furi_hal_cortex_timer_wait, void, (FuriHalCortexTimer)),
API_METHOD(furi_hal_crypto_decrypt, _Bool, (const uint8_t*, uint8_t*, size_t)),
API_METHOD(furi_hal_crypto_encrypt, _Bool, (const uint8_t*, uint8_t*, size_t)),
API_METHOD(furi_hal_crypto_store_add_key, _Bool, (FuriHalCryptoKey*, uint8_t*)),
API_METHOD(furi_hal_crypto_store_load_key, _Bool, (uint8_t, const uint8_t*)),
API_METHOD(furi_hal_crypto_store_unload_key, _Bool, (uint8_t)),
API_METHOD(furi_hal_crypto_verify_enclave, _Bool, (uint8_t*, uint8_t*)),
API_METHOD(furi_hal_crypto_verify_key, _Bool, (uint8_t)),
API_METHOD(furi_hal_debug_disable, void, ()),
API_METHOD(furi_hal_debug_enable, void, ()),
API_METHOD(furi_hal_gpio_add_int_callback, void, (const GpioPin*, GpioExtiCallback, void*)),
API_METHOD(furi_hal_gpio_disable_int_callback, void, (const GpioPin*)),
API_METHOD(furi_hal_gpio_enable_int_callback, void, (const GpioPin*)),
API_METHOD(furi_hal_gpio_init, void, (const GpioPin*, const GpioMode, const GpioPull, const GpioSpeed)),
API_METHOD(furi_hal_gpio_init_ex, void, (const GpioPin*, const GpioMode, const GpioPull, const GpioSpeed, const GpioAltFn)),
API_METHOD(furi_hal_gpio_init_simple, void, (const GpioPin*, const GpioMode)),
API_METHOD(furi_hal_gpio_remove_int_callback, void, (const GpioPin*)),
API_METHOD(furi_hal_hid_consumer_key_press, _Bool, (uint16_t)),
API_METHOD(furi_hal_hid_consumer_key_release, _Bool, (uint16_t)),
API_METHOD(furi_hal_hid_get_led_state, uint8_t, ()),
API_METHOD(furi_hal_hid_is_connected, _Bool, ()),
API_METHOD(furi_hal_hid_kb_press, _Bool, (uint16_t)),
API_METHOD(furi_hal_hid_kb_release, _Bool, (uint16_t)),
API_METHOD(furi_hal_hid_kb_release_all, _Bool, ()),
API_METHOD(furi_hal_hid_mouse_move, _Bool, (int8_t, int8_t)),
API_METHOD(furi_hal_hid_mouse_press, _Bool, (uint8_t)),
API_METHOD(furi_hal_hid_mouse_release, _Bool, (uint8_t)),
API_METHOD(furi_hal_hid_mouse_scroll, _Bool, (int8_t)),
API_METHOD(furi_hal_hid_set_state_callback, void, (HidStateCallback, void*)),
API_METHOD(furi_hal_hid_u2f_get_request, uint32_t, (uint8_t*)),
API_METHOD(furi_hal_hid_u2f_is_connected, _Bool, ()),
API_METHOD(furi_hal_hid_u2f_send_response, void, (uint8_t*, uint8_t)),
API_METHOD(furi_hal_hid_u2f_set_callback, void, (HidU2fCallback, void*)),
API_METHOD(furi_hal_i2c_acquire, void, (FuriHalI2cBusHandle*)),
API_METHOD(furi_hal_i2c_deinit_early, void, ()),
API_METHOD(furi_hal_i2c_is_device_ready, _Bool, (FuriHalI2cBusHandle*, uint8_t, uint32_t)),
API_METHOD(furi_hal_i2c_read_mem, _Bool, (FuriHalI2cBusHandle*, uint8_t, uint8_t, uint8_t*, uint8_t, uint32_t)),
API_METHOD(furi_hal_i2c_read_reg_16, _Bool, (FuriHalI2cBusHandle*, uint8_t, uint8_t, uint16_t*, uint32_t)),
API_METHOD(furi_hal_i2c_read_reg_8, _Bool, (FuriHalI2cBusHandle*, uint8_t, uint8_t, uint8_t*, uint32_t)),
API_METHOD(furi_hal_i2c_release, void, (FuriHalI2cBusHandle*)),
API_METHOD(furi_hal_i2c_rx, _Bool, (FuriHalI2cBusHandle*, const uint8_t, uint8_t*, const uint8_t, uint32_t)),
API_METHOD(furi_hal_i2c_trx, _Bool, (FuriHalI2cBusHandle*, const uint8_t, const uint8_t*, const uint8_t, uint8_t*, const uint8_t, uint32_t)),
API_METHOD(furi_hal_i2c_tx, _Bool, (FuriHalI2cBusHandle*, const uint8_t, const uint8_t*, const uint8_t, uint32_t)),
API_METHOD(furi_hal_i2c_write_mem, _Bool, (FuriHalI2cBusHandle*, uint8_t, uint8_t, uint8_t*, uint8_t, uint32_t)),
API_METHOD(furi_hal_i2c_write_reg_16, _Bool, (FuriHalI2cBusHandle*, uint8_t, uint8_t, uint16_t, uint32_t)),
API_METHOD(furi_hal_i2c_write_reg_8, _Bool, (FuriHalI2cBusHandle*, uint8_t, uint8_t, uint8_t, uint32_t)),
API_METHOD(furi_hal_ibutton_add_interrupt, void, (GpioExtiCallback, void*)),
API_METHOD(furi_hal_ibutton_emulate_set_next, void, (uint32_t)),
API_METHOD(furi_hal_ibutton_emulate_start, void, (uint32_t, FuriHalIbuttonEmulateCallback, void*)),
API_METHOD(furi_hal_ibutton_emulate_stop, void, ()),
API_METHOD(furi_hal_ibutton_pin_get_level, _Bool, ()),
API_METHOD(furi_hal_ibutton_pin_high, void, ()),
API_METHOD(furi_hal_ibutton_pin_low, void, ()),
API_METHOD(furi_hal_ibutton_remove_interrupt, void, ()),
API_METHOD(furi_hal_ibutton_start_drive, void, ()),
API_METHOD(furi_hal_ibutton_start_drive_in_isr, void, ()),
API_METHOD(furi_hal_ibutton_start_interrupt, void, ()),
API_METHOD(furi_hal_ibutton_start_interrupt_in_isr, void, ()),
API_METHOD(furi_hal_ibutton_stop, void, ()),
API_METHOD(furi_hal_info_get, void, (PropertyValueCallback, char, void*)),
API_METHOD(furi_hal_infrared_async_rx_set_capture_isr_callback, void, (FuriHalInfraredRxCaptureCallback, void*)),
API_METHOD(furi_hal_infrared_async_rx_set_timeout, void, (uint32_t)),
API_METHOD(furi_hal_infrared_async_rx_set_timeout_isr_callback, void, (FuriHalInfraredRxTimeoutCallback, void*)),
API_METHOD(furi_hal_infrared_async_rx_start, void, ()),
API_METHOD(furi_hal_infrared_async_rx_stop, void, ()),
API_METHOD(furi_hal_infrared_async_tx_set_data_isr_callback, void, (FuriHalInfraredTxGetDataISRCallback, void*)),
API_METHOD(furi_hal_infrared_async_tx_set_signal_sent_isr_callback, void, (FuriHalInfraredTxSignalSentISRCallback, void*)),
API_METHOD(furi_hal_infrared_async_tx_start, void, (uint32_t, float)),
API_METHOD(furi_hal_infrared_async_tx_stop, void, ()),
API_METHOD(furi_hal_infrared_async_tx_wait_termination, void, ()),
API_METHOD(furi_hal_infrared_is_busy, _Bool, ()),
API_METHOD(furi_hal_interrupt_set_isr, void, (FuriHalInterruptId, FuriHalInterruptISR, void*)),
API_METHOD(furi_hal_interrupt_set_isr_ex, void, (FuriHalInterruptId, uint16_t, FuriHalInterruptISR, void*)),
API_METHOD(furi_hal_light_blink_set_color, void, (Light)),
API_METHOD(furi_hal_light_blink_start, void, (Light, uint8_t, uint16_t, uint16_t)),
API_METHOD(furi_hal_light_blink_stop, void, ()),
API_METHOD(furi_hal_light_sequence, void, (const char*)),
API_METHOD(furi_hal_light_set, void, (Light, uint8_t)),
API_METHOD(furi_hal_memory_alloc, void*, (size_t)),
API_METHOD(furi_hal_memory_get_free, size_t, ()),
API_METHOD(furi_hal_memory_init, void, ()),
API_METHOD(furi_hal_memory_max_pool_block, size_t, ()),
API_METHOD(furi_hal_mpu_disable, void, ()),
API_METHOD(furi_hal_mpu_enable, void, ()),
API_METHOD(furi_hal_mpu_protect_disable, void, (FuriHalMpuRegion)),
API_METHOD(furi_hal_mpu_protect_no_access, void, (FuriHalMpuRegion, uint32_t, FuriHalMPURegionSize)),
API_METHOD(furi_hal_mpu_protect_read_only, void, (FuriHalMpuRegion, uint32_t, FuriHalMPURegionSize)),
API_METHOD(furi_hal_nfc_activate_nfca, _Bool, (uint32_t, uint32_t*)),
API_METHOD(furi_hal_nfc_detect, _Bool, (FuriHalNfcDevData*, uint32_t)),
API_METHOD(furi_hal_nfc_emulate_nfca, _Bool, (uint8_t*, uint8_t, uint8_t*, uint8_t, FuriHalNfcEmulateCallback, void*, uint32_t)),
API_METHOD(furi_hal_nfc_exit_sleep, void, ()),
API_METHOD(furi_hal_nfc_field_off, void, ()),
API_METHOD(furi_hal_nfc_field_on, void, ()),
API_METHOD(furi_hal_nfc_is_busy, _Bool, ()),
API_METHOD(furi_hal_nfc_is_init, _Bool, ()),
API_METHOD(furi_hal_nfc_listen, _Bool, (uint8_t*, uint8_t, uint8_t*, uint8_t, _Bool, uint32_t)),
API_METHOD(furi_hal_nfc_listen_rx, _Bool, (FuriHalNfcTxRxContext*, uint32_t)),
API_METHOD(furi_hal_nfc_listen_sleep, void, ()),
API_METHOD(furi_hal_nfc_listen_start, void, (FuriHalNfcDevData*)),
API_METHOD(furi_hal_nfc_ll_poll, void, ()),
API_METHOD(furi_hal_nfc_ll_set_error_handling, void, (FuriHalNfcErrorHandling)),
API_METHOD(furi_hal_nfc_ll_set_fdt_listen, void, (uint32_t)),
API_METHOD(furi_hal_nfc_ll_set_fdt_poll, void, (uint32_t)),
API_METHOD(furi_hal_nfc_ll_set_guard_time, void, (uint32_t)),
API_METHOD(furi_hal_nfc_ll_set_mode, FuriHalNfcReturn, (FuriHalNfcMode, FuriHalNfcBitrate, FuriHalNfcBitrate)),
API_METHOD(furi_hal_nfc_ll_txrx, FuriHalNfcReturn, (uint8_t*, uint16_t, uint8_t*, uint16_t, uint16_t*, uint32_t, uint32_t)),
API_METHOD(furi_hal_nfc_ll_txrx_bits, FuriHalNfcReturn, (uint8_t*, uint16_t, uint8_t*, uint16_t, uint16_t*, uint32_t, uint32_t)),
API_METHOD(furi_hal_nfc_ll_txrx_off, void, ()),
API_METHOD(furi_hal_nfc_ll_txrx_on, void, ()),
API_METHOD(furi_hal_nfc_sleep, void, ()),
API_METHOD(furi_hal_nfc_start_sleep, void, ()),
API_METHOD(furi_hal_nfc_stop, void, ()),
API_METHOD(furi_hal_nfc_stop_cmd, void, ()),
API_METHOD(furi_hal_nfc_tx_rx, _Bool, (FuriHalNfcTxRxContext*, uint16_t)),
API_METHOD(furi_hal_nfc_tx_rx_full, _Bool, (FuriHalNfcTxRxContext*)),
API_METHOD(furi_hal_os_tick, void, ()),
API_METHOD(furi_hal_power_check_otg_status, void, ()),
API_METHOD(furi_hal_power_debug_get, void, (PropertyValueCallback, void*)),
API_METHOD(furi_hal_power_deep_sleep_available, _Bool, ()),
API_METHOD(furi_hal_power_disable_external_3_3v, void, ()),
API_METHOD(furi_hal_power_disable_otg, void, ()),
API_METHOD(furi_hal_power_enable_external_3_3v, void, ()),
API_METHOD(furi_hal_power_enable_otg, void, ()),
API_METHOD(furi_hal_power_gauge_is_ok, _Bool, ()),
API_METHOD(furi_hal_power_get_bat_health_pct, uint8_t, ()),
API_METHOD(furi_hal_power_get_battery_charging_voltage, float, ()),
API_METHOD(furi_hal_power_get_battery_current, float, (FuriHalPowerIC)),
API_METHOD(furi_hal_power_get_battery_design_capacity, uint32_t, ()),
API_METHOD(furi_hal_power_get_battery_full_capacity, uint32_t, ()),
API_METHOD(furi_hal_power_get_battery_remaining_capacity, uint32_t, ()),
API_METHOD(furi_hal_power_get_battery_temperature, float, (FuriHalPowerIC)),
API_METHOD(furi_hal_power_get_battery_voltage, float, (FuriHalPowerIC)),
API_METHOD(furi_hal_power_get_pct, uint8_t, ()),
API_METHOD(furi_hal_power_get_usb_voltage, float, ()),
API_METHOD(furi_hal_power_info_get, void, (PropertyValueCallback, char, void*)),
API_METHOD(furi_hal_power_insomnia_enter, void, ()),
API_METHOD(furi_hal_power_insomnia_exit, void, ()),
API_METHOD(furi_hal_power_is_charging, _Bool, ()),
API_METHOD(furi_hal_power_is_charging_done, _Bool, ()),
API_METHOD(furi_hal_power_is_otg_enabled, _Bool, ()),
API_METHOD(furi_hal_power_off, void, ()),
API_METHOD(furi_hal_power_reset, void, ()),
API_METHOD(furi_hal_power_set_battery_charging_voltage, void, (float)),
API_METHOD(furi_hal_power_shutdown, void, ()),
API_METHOD(furi_hal_power_sleep, void, ()),
API_METHOD(furi_hal_power_sleep_available, _Bool, ()),
API_METHOD(furi_hal_power_suppress_charge_enter, void, ()),
API_METHOD(furi_hal_power_suppress_charge_exit, void, ()),
API_METHOD(furi_hal_pwm_set_params, void, (FuriHalPwmOutputId, uint32_t, uint8_t)),
API_METHOD(furi_hal_pwm_start, void, (FuriHalPwmOutputId, uint32_t, uint8_t)),
API_METHOD(furi_hal_pwm_stop, void, (FuriHalPwmOutputId)),
API_METHOD(furi_hal_random_fill_buf, void, (uint8_t*, uint32_t)),
API_METHOD(furi_hal_random_get, uint32_t, ()),
API_METHOD(furi_hal_region_get, const FuriHalRegion*, ()),
API_METHOD(furi_hal_region_get_band, const FuriHalRegionBand*, (uint32_t)),
API_METHOD(furi_hal_region_get_name, const char*, ()),
API_METHOD(furi_hal_region_init, void, ()),
API_METHOD(furi_hal_region_is_frequency_allowed, _Bool, (uint32_t)),
API_METHOD(furi_hal_region_is_provisioned, _Bool, ()),
API_METHOD(furi_hal_region_set, void, (FuriHalRegion*)),
API_METHOD(furi_hal_resources_deinit_early, void, ()),
API_METHOD(furi_hal_rfid_change_read_config, void, (float, float)),
API_METHOD(furi_hal_rfid_comp_set_callback, void, (FuriHalRfidCompCallback, void*)),
API_METHOD(furi_hal_rfid_comp_start, void, ()),
API_METHOD(furi_hal_rfid_comp_stop, void, ()),
API_METHOD(furi_hal_rfid_pin_pull_pulldown, void, ()),
API_METHOD(furi_hal_rfid_pin_pull_release, void, ()),
API_METHOD(furi_hal_rfid_pins_emulate, void, ()),
API_METHOD(furi_hal_rfid_pins_read, void, ()),
API_METHOD(furi_hal_rfid_pins_reset, void, ()),
API_METHOD(furi_hal_rfid_set_emulate_period, void, (uint32_t)),
API_METHOD(furi_hal_rfid_set_emulate_pulse, void, (uint32_t)),
API_METHOD(furi_hal_rfid_set_read_period, void, (uint32_t)),
API_METHOD(furi_hal_rfid_set_read_pulse, void, (uint32_t)),
API_METHOD(furi_hal_rfid_tim_emulate, void, (float)),
API_METHOD(furi_hal_rfid_tim_emulate_dma_start, void, (uint32_t*, uint32_t*, size_t, FuriHalRfidDMACallback, void*)),
API_METHOD(furi_hal_rfid_tim_emulate_dma_stop, void, ()),
API_METHOD(furi_hal_rfid_tim_emulate_start, void, (FuriHalRfidEmulateCallback, void*)),
API_METHOD(furi_hal_rfid_tim_emulate_stop, void, ()),
API_METHOD(furi_hal_rfid_tim_read, void, (float, float)),
API_METHOD(furi_hal_rfid_tim_read_capture_start, void, (FuriHalRfidReadCaptureCallback, void*)),
API_METHOD(furi_hal_rfid_tim_read_capture_stop, void, ()),
API_METHOD(furi_hal_rfid_tim_read_start, void, ()),
API_METHOD(furi_hal_rfid_tim_read_stop, void, ()),
API_METHOD(furi_hal_rfid_tim_reset, void, ()),
API_METHOD(furi_hal_rtc_datetime_to_timestamp, uint32_t, (FuriHalRtcDateTime*)),
API_METHOD(furi_hal_rtc_deinit_early, void, ()),
API_METHOD(furi_hal_rtc_get_boot_mode, FuriHalRtcBootMode, ()),
API_METHOD(furi_hal_rtc_get_datetime, void, (FuriHalRtcDateTime*)),
API_METHOD(furi_hal_rtc_get_fault_data, uint32_t, ()),
API_METHOD(furi_hal_rtc_get_heap_track_mode, FuriHalRtcHeapTrackMode, ()),
API_METHOD(furi_hal_rtc_get_locale_dateformat, FuriHalRtcLocaleDateFormat, ()),
API_METHOD(furi_hal_rtc_get_locale_timeformat, FuriHalRtcLocaleTimeFormat, ()),
API_METHOD(furi_hal_rtc_get_locale_units, FuriHalRtcLocaleUnits, ()),
API_METHOD(furi_hal_rtc_get_log_level, uint8_t, ()),
API_METHOD(furi_hal_rtc_get_pin_fails, uint32_t, ()),
API_METHOD(furi_hal_rtc_get_register, uint32_t, (FuriHalRtcRegister)),
API_METHOD(furi_hal_rtc_get_timestamp, uint32_t, ()),
API_METHOD(furi_hal_rtc_is_flag_set, _Bool, (FuriHalRtcFlag)),
API_METHOD(furi_hal_rtc_reset_flag, void, (FuriHalRtcFlag)),
API_METHOD(furi_hal_rtc_set_boot_mode, void, (FuriHalRtcBootMode)),
API_METHOD(furi_hal_rtc_set_datetime, void, (FuriHalRtcDateTime*)),
API_METHOD(furi_hal_rtc_set_fault_data, void, (uint32_t)),
API_METHOD(furi_hal_rtc_set_flag, void, (FuriHalRtcFlag)),
API_METHOD(furi_hal_rtc_set_heap_track_mode, void, (FuriHalRtcHeapTrackMode)),
API_METHOD(furi_hal_rtc_set_locale_dateformat, void, (FuriHalRtcLocaleDateFormat)),
API_METHOD(furi_hal_rtc_set_locale_timeformat, void, (FuriHalRtcLocaleTimeFormat)),
API_METHOD(furi_hal_rtc_set_locale_units, void, (FuriHalRtcLocaleUnits)),
API_METHOD(furi_hal_rtc_set_log_level, void, (uint8_t)),
API_METHOD(furi_hal_rtc_set_pin_fails, void, (uint32_t)),
API_METHOD(furi_hal_rtc_set_register, void, (FuriHalRtcRegister, uint32_t)),
API_METHOD(furi_hal_rtc_validate_datetime, _Bool, (FuriHalRtcDateTime*)),
API_METHOD(furi_hal_speaker_acquire, _Bool, (uint32_t)),
API_METHOD(furi_hal_speaker_is_mine, _Bool, ()),
API_METHOD(furi_hal_speaker_release, void, ()),
API_METHOD(furi_hal_speaker_set_volume, void, (float)),
API_METHOD(furi_hal_speaker_start, void, (float, float)),
API_METHOD(furi_hal_speaker_stop, void, ()),
API_METHOD(furi_hal_spi_acquire, void, (FuriHalSpiBusHandle*)),
API_METHOD(furi_hal_spi_bus_deinit, void, (FuriHalSpiBus*)),
API_METHOD(furi_hal_spi_bus_handle_deinit, void, (FuriHalSpiBusHandle*)),
API_METHOD(furi_hal_spi_bus_handle_init, void, (FuriHalSpiBusHandle*)),
API_METHOD(furi_hal_spi_bus_init, void, (FuriHalSpiBus*)),
API_METHOD(furi_hal_spi_bus_rx, _Bool, (FuriHalSpiBusHandle*, uint8_t*, size_t, uint32_t)),
API_METHOD(furi_hal_spi_bus_trx, _Bool, (FuriHalSpiBusHandle*, uint8_t*, uint8_t*, size_t, uint32_t)),
API_METHOD(furi_hal_spi_bus_tx, _Bool, (FuriHalSpiBusHandle*, uint8_t*, size_t, uint32_t)),
API_METHOD(furi_hal_spi_deinit_early, void, ()),
API_METHOD(furi_hal_spi_init_early, void, ()),
API_METHOD(furi_hal_spi_release, void, (FuriHalSpiBusHandle*)),
API_METHOD(furi_hal_subghz_flush_rx, void, ()),
API_METHOD(furi_hal_subghz_flush_tx, void, ()),
API_METHOD(furi_hal_subghz_get_lqi, uint8_t, ()),
API_METHOD(furi_hal_subghz_get_rssi, float, ()),
API_METHOD(furi_hal_subghz_idle, void, ()),
API_METHOD(furi_hal_subghz_is_async_tx_complete, _Bool, ()),
API_METHOD(furi_hal_subghz_is_frequency_valid, _Bool, (uint32_t)),
API_METHOD(furi_hal_subghz_is_rx_data_crc_valid, _Bool, ()),
API_METHOD(furi_hal_subghz_is_tx_allowed, _Bool, (uint32_t)),
API_METHOD(furi_hal_subghz_load_custom_preset, void, (uint8_t*)),
API_METHOD(furi_hal_subghz_load_patable, void, (const uint8_t[8])),
API_METHOD(furi_hal_subghz_load_preset, void, (FuriHalSubGhzPreset)),
API_METHOD(furi_hal_subghz_load_registers, void, (uint8_t*)),
API_METHOD(furi_hal_subghz_read_packet, void, (uint8_t*, uint8_t*)),
API_METHOD(furi_hal_subghz_reset, void, ()),
API_METHOD(furi_hal_subghz_rx, void, ()),
API_METHOD(furi_hal_subghz_rx_pipe_not_empty, _Bool, ()),
API_METHOD(furi_hal_subghz_set_async_mirror_pin, void, (const GpioPin*)),
API_METHOD(furi_hal_subghz_set_frequency, uint32_t, (uint32_t)),
API_METHOD(furi_hal_subghz_set_frequency_and_path, uint32_t, (uint32_t)),
API_METHOD(furi_hal_subghz_set_path, void, (FuriHalSubGhzPath)),
API_METHOD(furi_hal_subghz_sleep, void, ()),
API_METHOD(furi_hal_subghz_start_async_rx, void, (FuriHalSubGhzCaptureCallback, void*)),
API_METHOD(furi_hal_subghz_start_async_tx, _Bool, (FuriHalSubGhzAsyncTxCallback, void*)),
API_METHOD(furi_hal_subghz_stop_async_rx, void, ()),
API_METHOD(furi_hal_subghz_stop_async_tx, void, ()),
API_METHOD(furi_hal_subghz_tx, _Bool, ()),
API_METHOD(furi_hal_subghz_write_packet, void, (const uint8_t*, uint8_t)),
API_METHOD(furi_hal_switch, void, (void*)),
API_METHOD(furi_hal_uart_deinit, void, (FuriHalUartId)),
API_METHOD(furi_hal_uart_init, void, (FuriHalUartId, uint32_t)),
API_METHOD(furi_hal_uart_resume, void, (FuriHalUartId)),
API_METHOD(furi_hal_uart_set_br, void, (FuriHalUartId, uint32_t)),
API_METHOD(furi_hal_uart_set_irq_cb, void, (FuriHalUartId, void (*)(UartIrqEvent, uint8_t, void*), void*)),
API_METHOD(furi_hal_uart_suspend, void, (FuriHalUartId)),
API_METHOD(furi_hal_uart_tx, void, (FuriHalUartId, uint8_t*, size_t)),
API_METHOD(furi_hal_usb_disable, void, ()),
API_METHOD(furi_hal_usb_enable, void, ()),
API_METHOD(furi_hal_usb_get_config, FuriHalUsbInterface*, ()),
API_METHOD(furi_hal_usb_is_locked, _Bool, ()),
API_METHOD(furi_hal_usb_lock, void, ()),
API_METHOD(furi_hal_usb_reinit, void, ()),
API_METHOD(furi_hal_usb_set_config, _Bool, (FuriHalUsbInterface*, void*)),
API_METHOD(furi_hal_usb_unlock, void, ()),
API_METHOD(furi_hal_version_do_i_belong_here, _Bool, ()),
API_METHOD(furi_hal_version_get_ble_local_device_name_ptr, const char*, ()),
API_METHOD(furi_hal_version_get_ble_mac, const uint8_t*, ()),
API_METHOD(furi_hal_version_get_device_name_ptr, const char*, ()),
API_METHOD(furi_hal_version_get_firmware_version, const Version*, ()),
API_METHOD(furi_hal_version_get_hw_body, uint8_t, ()),
API_METHOD(furi_hal_version_get_hw_color, FuriHalVersionColor, ()),
API_METHOD(furi_hal_version_get_hw_connect, uint8_t, ()),
API_METHOD(furi_hal_version_get_hw_display, FuriHalVersionDisplay, ()),
API_METHOD(furi_hal_version_get_hw_region, FuriHalVersionRegion, ()),
API_METHOD(furi_hal_version_get_hw_region_name, const char*, ()),
API_METHOD(furi_hal_version_get_hw_region_name_otp, const char*, ()),
API_METHOD(furi_hal_version_get_hw_region_otp, FuriHalVersionRegion, ()),
API_METHOD(furi_hal_version_get_hw_target, uint8_t, ()),
API_METHOD(furi_hal_version_get_hw_timestamp, uint32_t, ()),
API_METHOD(furi_hal_version_get_hw_version, uint8_t, ()),
API_METHOD(furi_hal_version_get_model_name, const char*, ()),
API_METHOD(furi_hal_version_get_name_ptr, const char*, ()),
API_METHOD(furi_hal_version_get_otp_version, FuriHalVersionOtpVersion, ()),
API_METHOD(furi_hal_version_set_custom_name, void, (const char*)),
API_METHOD(furi_hal_version_uid, const uint8_t*, ()),
API_METHOD(furi_hal_version_uid_size, size_t, ()),
API_METHOD(furi_hal_vibro_on, void, (_Bool)),
API_METHOD(furi_kernel_get_tick_frequency, uint32_t, ()),
API_METHOD(furi_kernel_lock, int32_t, ()),
API_METHOD(furi_kernel_restore_lock, int32_t, (int32_t)),
API_METHOD(furi_kernel_unlock, int32_t, ()),
API_METHOD(furi_log_get_level, FuriLogLevel, ()),
API_METHOD(furi_log_print_format, void, (FuriLogLevel, const char*, const char*, ...)),
API_METHOD(furi_log_set_level, void, (FuriLogLevel)),
API_METHOD(furi_message_queue_alloc, FuriMessageQueue*, (uint32_t, uint32_t)),
API_METHOD(furi_message_queue_free, void, (FuriMessageQueue*)),
API_METHOD(furi_message_queue_get, FuriStatus, (FuriMessageQueue*, void*, uint32_t)),
API_METHOD(furi_message_queue_get_capacity, uint32_t, (FuriMessageQueue*)),
API_METHOD(furi_message_queue_get_count, uint32_t, (FuriMessageQueue*)),
API_METHOD(furi_message_queue_get_message_size, uint32_t, (FuriMessageQueue*)),
API_METHOD(furi_message_queue_get_space, uint32_t, (FuriMessageQueue*)),
API_METHOD(furi_message_queue_put, FuriStatus, (FuriMessageQueue*, const void*, uint32_t)),
API_METHOD(furi_message_queue_reset, FuriStatus, (FuriMessageQueue*)),
API_METHOD(furi_ms_to_ticks, uint32_t, (uint32_t)),
API_METHOD(furi_mutex_acquire, FuriStatus, (FuriMutex*, uint32_t)),
API_METHOD(furi_mutex_alloc, FuriMutex*, (FuriMutexType)),
API_METHOD(furi_mutex_free, void, (FuriMutex*)),
API_METHOD(furi_mutex_get_owner, FuriThreadId, (FuriMutex*)),
API_METHOD(furi_mutex_release, FuriStatus, (FuriMutex*)),
API_METHOD(furi_pubsub_alloc, FuriPubSub*, ()),
API_METHOD(furi_pubsub_publish, void, (FuriPubSub*, void*)),
API_METHOD(furi_pubsub_subscribe, FuriPubSubSubscription*, (FuriPubSub*, FuriPubSubCallback, void*)),
API_METHOD(furi_pubsub_unsubscribe, void, (FuriPubSub*, FuriPubSubSubscription*)),
API_METHOD(furi_record_close, void, (const char*)),
API_METHOD(furi_record_create, void, (const char*, void*)),
API_METHOD(furi_record_exists, _Bool, (const char*)),
API_METHOD(furi_record_open, void*, (const char*)),
API_METHOD(furi_run, void, ()),
API_METHOD(furi_semaphore_acquire, FuriStatus, (FuriSemaphore*, uint32_t)),
API_METHOD(furi_semaphore_alloc, FuriSemaphore*, (uint32_t, uint32_t)),
API_METHOD(furi_semaphore_free, void, (FuriSemaphore*)),
API_METHOD(furi_semaphore_get_count, uint32_t, (FuriSemaphore*)),
API_METHOD(furi_semaphore_release, FuriStatus, (FuriSemaphore*)),
API_METHOD(furi_stream_buffer_alloc, FuriStreamBuffer*, (size_t, size_t)),
API_METHOD(furi_stream_buffer_bytes_available, size_t, (FuriStreamBuffer*)),
API_METHOD(furi_stream_buffer_free, void, (FuriStreamBuffer*)),
API_METHOD(furi_stream_buffer_is_empty, _Bool, (FuriStreamBuffer*)),
API_METHOD(furi_stream_buffer_is_full, _Bool, (FuriStreamBuffer*)),
API_METHOD(furi_stream_buffer_receive, size_t, (FuriStreamBuffer*, void*, size_t, uint32_t)),
API_METHOD(furi_stream_buffer_reset, FuriStatus, (FuriStreamBuffer*)),
API_METHOD(furi_stream_buffer_send, size_t, (FuriStreamBuffer*, const void*, size_t, uint32_t)),
API_METHOD(furi_stream_buffer_spaces_available, size_t, (FuriStreamBuffer*)),
API_METHOD(furi_stream_set_trigger_level, _Bool, (FuriStreamBuffer*, size_t)),
API_METHOD(furi_string_alloc, FuriString*, ()),
API_METHOD(furi_string_alloc_move, FuriString*, (FuriString*)),
API_METHOD(furi_string_alloc_printf, FuriString*, (const char[], ...)),
API_METHOD(furi_string_alloc_set, FuriString*, (const FuriString*)),
API_METHOD(furi_string_alloc_set_str, FuriString*, (const char[])),
API_METHOD(furi_string_alloc_vprintf, FuriString*, (const char[], va_list)),
API_METHOD(furi_string_cat, void, (FuriString*, const FuriString*)),
API_METHOD(furi_string_cat_printf, int, (FuriString*, const char[], ...)),
API_METHOD(furi_string_cat_str, void, (FuriString*, const char[])),
API_METHOD(furi_string_cat_vprintf, int, (FuriString*, const char[], va_list)),
API_METHOD(furi_string_cmp, int, (const FuriString*, const FuriString*)),
API_METHOD(furi_string_cmp_str, int, (const FuriString*, const char[])),
API_METHOD(furi_string_cmpi, int, (const FuriString*, const FuriString*)),
API_METHOD(furi_string_cmpi_str, int, (const FuriString*, const char[])),
API_METHOD(furi_string_empty, _Bool, (const FuriString*)),
API_METHOD(furi_string_end_with, _Bool, (const FuriString*, const FuriString*)),
API_METHOD(furi_string_end_with_str, _Bool, (const FuriString*, const char[])),
API_METHOD(furi_string_equal, _Bool, (const FuriString*, const FuriString*)),
API_METHOD(furi_string_equal_str, _Bool, (const FuriString*, const char[])),
API_METHOD(furi_string_free, void, (FuriString*)),
API_METHOD(furi_string_get_char, char, (const FuriString*, size_t)),
API_METHOD(furi_string_get_cstr, const char*, (const FuriString*)),
API_METHOD(furi_string_hash, size_t, (const FuriString*)),
API_METHOD(furi_string_left, void, (FuriString*, size_t)),
API_METHOD(furi_string_mid, void, (FuriString*, size_t, size_t)),
API_METHOD(furi_string_move, void, (FuriString*, FuriString*)),
API_METHOD(furi_string_printf, int, (FuriString*, const char[], ...)),
API_METHOD(furi_string_push_back, void, (FuriString*, char)),
API_METHOD(furi_string_replace, size_t, (FuriString*, FuriString*, FuriString*, size_t)),
API_METHOD(furi_string_replace_all, void, (FuriString*, const FuriString*, const FuriString*)),
API_METHOD(furi_string_replace_all_str, void, (FuriString*, const char[], const char[])),
API_METHOD(furi_string_replace_at, void, (FuriString*, size_t, size_t, const char[])),
API_METHOD(furi_string_replace_str, size_t, (FuriString*, const char[], const char[], size_t)),
API_METHOD(furi_string_reserve, void, (FuriString*, size_t)),
API_METHOD(furi_string_reset, void, (FuriString*)),
API_METHOD(furi_string_right, void, (FuriString*, size_t)),
API_METHOD(furi_string_search, size_t, (const FuriString*, const FuriString*, size_t)),
API_METHOD(furi_string_search_char, size_t, (const FuriString*, char, size_t)),
API_METHOD(furi_string_search_rchar, size_t, (const FuriString*, char, size_t)),
API_METHOD(furi_string_search_str, size_t, (const FuriString*, const char[], size_t)),
API_METHOD(furi_string_set, void, (FuriString*, FuriString*)),
API_METHOD(furi_string_set_char, void, (FuriString*, size_t, const char)),
API_METHOD(furi_string_set_n, void, (FuriString*, const FuriString*, size_t, size_t)),
API_METHOD(furi_string_set_str, void, (FuriString*, const char[])),
API_METHOD(furi_string_set_strn, void, (FuriString*, const char[], size_t)),
API_METHOD(furi_string_size, size_t, (const FuriString*)),
API_METHOD(furi_string_start_with, _Bool, (const FuriString*, const FuriString*)),
API_METHOD(furi_string_start_with_str, _Bool, (const FuriString*, const char[])),
API_METHOD(furi_string_swap, void, (FuriString*, FuriString*)),
API_METHOD(furi_string_trim, void, (FuriString*, const char[])),
API_METHOD(furi_string_utf8_decode, void, (char, FuriStringUTF8State*, FuriStringUnicodeValue*)),
API_METHOD(furi_string_utf8_length, size_t, (FuriString*)),
API_METHOD(furi_string_utf8_push, void, (FuriString*, FuriStringUnicodeValue)),
API_METHOD(furi_string_vprintf, int, (FuriString*, const char[], va_list)),
API_METHOD(furi_thread_alloc, FuriThread*, ()),
API_METHOD(furi_thread_alloc_ex, FuriThread*, (const char*, uint32_t, FuriThreadCallback, void*)),
API_METHOD(furi_thread_catch, void, ()),
API_METHOD(furi_thread_enable_heap_trace, void, (FuriThread*)),
API_METHOD(furi_thread_enumerate, uint32_t, (FuriThreadId*, uint32_t)),
API_METHOD(furi_thread_flags_clear, uint32_t, (uint32_t)),
API_METHOD(furi_thread_flags_get, uint32_t, ()),
API_METHOD(furi_thread_flags_set, uint32_t, (FuriThreadId, uint32_t)),
API_METHOD(furi_thread_flags_wait, uint32_t, (uint32_t, uint32_t, uint32_t)),
API_METHOD(furi_thread_free, void, (FuriThread*)),
API_METHOD(furi_thread_get_current, FuriThread*, ()),
API_METHOD(furi_thread_get_current_id, FuriThreadId, ()),
API_METHOD(furi_thread_get_heap_size, size_t, (FuriThread*)),
API_METHOD(furi_thread_get_id, FuriThreadId, (FuriThread*)),
API_METHOD(furi_thread_get_name, const char*, (FuriThreadId)),
API_METHOD(furi_thread_get_return_code, int32_t, (FuriThread*)),
API_METHOD(furi_thread_get_stack_space, uint32_t, (FuriThreadId)),
API_METHOD(furi_thread_get_state, FuriThreadState, (FuriThread*)),
API_METHOD(furi_thread_is_suspended, _Bool, (FuriThreadId)),
API_METHOD(furi_thread_join, _Bool, (FuriThread*)),
API_METHOD(furi_thread_mark_as_service, void, (FuriThread*)),
API_METHOD(furi_thread_resume, void, (FuriThreadId)),
API_METHOD(furi_thread_set_callback, void, (FuriThread*, FuriThreadCallback)),
API_METHOD(furi_thread_set_context, void, (FuriThread*, void*)),
API_METHOD(furi_thread_set_name, void, (FuriThread*, const char*)),
API_METHOD(furi_thread_set_priority, void, (FuriThread*, FuriThreadPriority)),
API_METHOD(furi_thread_set_stack_size, void, (FuriThread*, size_t)),
API_METHOD(furi_thread_set_state_callback, void, (FuriThread*, FuriThreadStateCallback)),
API_METHOD(furi_thread_set_state_context, void, (FuriThread*, void*)),
API_METHOD(furi_thread_set_stdout_callback, _Bool, (FuriThreadStdoutWriteCallback)),
API_METHOD(furi_thread_start, void, (FuriThread*)),
API_METHOD(furi_thread_stdout_flush, int32_t, ()),
API_METHOD(furi_thread_stdout_write, size_t, (const char*, size_t)),
API_METHOD(furi_thread_suspend, void, (FuriThreadId)),
API_METHOD(furi_thread_yield, void, ()),
API_METHOD(furi_timer_alloc, FuriTimer*, (FuriTimerCallback, FuriTimerType, void*)),
API_METHOD(furi_timer_free, void, (FuriTimer*)),
API_METHOD(furi_timer_is_running, uint32_t, (FuriTimer*)),
API_METHOD(furi_timer_start, FuriStatus, (FuriTimer*, uint32_t)),
API_METHOD(furi_timer_stop, FuriStatus, (FuriTimer*)),
API_METHOD(getRandomDeed, DolphinDeed, ()),
API_METHOD(gui_add_framebuffer_callback, void, (Gui*, GuiCanvasCommitCallback, void*)),
API_METHOD(gui_add_view_port, void, (Gui*, ViewPort*, GuiLayer)),
API_METHOD(gui_direct_draw_acquire, Canvas*, (Gui*)),
API_METHOD(gui_direct_draw_release, void, (Gui*)),
API_METHOD(gui_get_framebuffer_size, size_t, (Gui*)),
API_METHOD(gui_remove_framebuffer_callback, void, (Gui*, GuiCanvasCommitCallback, void*)),
API_METHOD(gui_remove_view_port, void, (Gui*, ViewPort*)),
API_METHOD(gui_set_lockdown, void, (Gui*, _Bool)),
API_METHOD(gui_view_port_send_to_front, void, (Gui*, ViewPort*)),
API_METHOD(hal_sd_detect, _Bool, ()),
API_METHOD(hal_sd_detect_init, void, ()),
API_METHOD(hal_sd_detect_set_low, void, ()),
API_METHOD(hmac_sha256_finish, void, (const hmac_sha256_context*, const uint8_t*, uint8_t*)),
API_METHOD(hmac_sha256_init, void, (hmac_sha256_context*, const uint8_t*)),
API_METHOD(hmac_sha256_update, void, (const hmac_sha256_context*, const uint8_t*, unsigned)),
API_METHOD(ibutton_key_alloc, iButtonKey*, ()),
API_METHOD(ibutton_key_clear_data, void, (iButtonKey*)),
API_METHOD(ibutton_key_dallas_crc_is_valid, _Bool, (iButtonKey*)),
API_METHOD(ibutton_key_dallas_is_1990_key, _Bool, (iButtonKey*)),
API_METHOD(ibutton_key_free, void, (iButtonKey*)),
API_METHOD(ibutton_key_get_data_p, const uint8_t*, (iButtonKey*)),
API_METHOD(ibutton_key_get_data_size, uint8_t, (iButtonKey*)),
API_METHOD(ibutton_key_get_max_size, uint8_t, ()),
API_METHOD(ibutton_key_get_size_by_type, uint8_t, (iButtonKeyType)),
API_METHOD(ibutton_key_get_string_by_type, const char*, (iButtonKeyType)),
API_METHOD(ibutton_key_get_type, iButtonKeyType, (iButtonKey*)),
API_METHOD(ibutton_key_get_type_by_string, _Bool, (const char*, iButtonKeyType*)),
API_METHOD(ibutton_key_set, void, (iButtonKey*, const iButtonKey*)),
API_METHOD(ibutton_key_set_data, void, (iButtonKey*, uint8_t*, uint8_t)),
API_METHOD(ibutton_key_set_type, void, (iButtonKey*, iButtonKeyType)),
API_METHOD(ibutton_worker_alloc, iButtonWorker*, ()),
API_METHOD(ibutton_worker_emulate_set_callback, void, (iButtonWorker*, iButtonWorkerEmulateCallback, void*)),
API_METHOD(ibutton_worker_emulate_start, void, (iButtonWorker*, iButtonKey*)),
API_METHOD(ibutton_worker_free, void, (iButtonWorker*)),
API_METHOD(ibutton_worker_read_set_callback, void, (iButtonWorker*, iButtonWorkerReadCallback, void*)),
API_METHOD(ibutton_worker_read_start, void, (iButtonWorker*, iButtonKey*)),
API_METHOD(ibutton_worker_start_thread, void, (iButtonWorker*)),
API_METHOD(ibutton_worker_stop, void, (iButtonWorker*)),
API_METHOD(ibutton_worker_stop_thread, void, (iButtonWorker*)),
API_METHOD(ibutton_worker_write_set_callback, void, (iButtonWorker*, iButtonWorkerWriteCallback, void*)),
API_METHOD(ibutton_worker_write_start, void, (iButtonWorker*, iButtonKey*)),
API_METHOD(icon_animation_alloc, IconAnimation*, (const Icon*)),
API_METHOD(icon_animation_free, void, (IconAnimation*)),
API_METHOD(icon_animation_get_height, uint8_t, (IconAnimation*)),
API_METHOD(icon_animation_get_width, uint8_t, (IconAnimation*)),
API_METHOD(icon_animation_is_last_frame, _Bool, (IconAnimation*)),
API_METHOD(icon_animation_set_update_callback, void, (IconAnimation*, IconAnimationCallback, void*)),
API_METHOD(icon_animation_start, void, (IconAnimation*)),
API_METHOD(icon_animation_stop, void, (IconAnimation*)),
API_METHOD(icon_get_data, const uint8_t*, (const Icon*)),
API_METHOD(icon_get_height, uint8_t, (const Icon*)),
API_METHOD(icon_get_width, uint8_t, (const Icon*)),
API_METHOD(infrared_alloc_decoder, InfraredDecoderHandler*, ()),
API_METHOD(infrared_alloc_encoder, InfraredEncoderHandler*, ()),
API_METHOD(infrared_check_decoder_ready, const InfraredMessage*, (InfraredDecoderHandler*)),
API_METHOD(infrared_decode, const InfraredMessage*, (InfraredDecoderHandler*, _Bool, uint32_t)),
API_METHOD(infrared_encode, InfraredStatus, (InfraredEncoderHandler*, uint32_t*, _Bool*)),
API_METHOD(infrared_free_decoder, void, (InfraredDecoderHandler*)),
API_METHOD(infrared_free_encoder, void, (InfraredEncoderHandler*)),
API_METHOD(infrared_get_protocol_address_length, uint8_t, (InfraredProtocol)),
API_METHOD(infrared_get_protocol_by_name, InfraredProtocol, (const char*)),
API_METHOD(infrared_get_protocol_command_length, uint8_t, (InfraredProtocol)),
API_METHOD(infrared_get_protocol_duty_cycle, float, (InfraredProtocol)),
API_METHOD(infrared_get_protocol_frequency, uint32_t, (InfraredProtocol)),
API_METHOD(infrared_get_protocol_min_repeat_count, size_t, (InfraredProtocol)),
API_METHOD(infrared_get_protocol_name, const char*, (InfraredProtocol)),
API_METHOD(infrared_is_protocol_valid, _Bool, (InfraredProtocol)),
API_METHOD(infrared_reset_decoder, void, (InfraredDecoderHandler*)),
API_METHOD(infrared_reset_encoder, void, (InfraredEncoderHandler*, const InfraredMessage*)),
API_METHOD(infrared_send, void, (const InfraredMessage*, int)),
API_METHOD(infrared_send_raw, void, (const uint32_t[], uint32_t, _Bool)),
API_METHOD(infrared_send_raw_ext, void, (const uint32_t[], uint32_t, _Bool, uint32_t, float)),
API_METHOD(infrared_worker_alloc, InfraredWorker*, ()),
API_METHOD(infrared_worker_free, void, (InfraredWorker*)),
API_METHOD(infrared_worker_get_decoded_signal, const InfraredMessage*, (const InfraredWorkerSignal*)),
API_METHOD(infrared_worker_get_raw_signal, void, (const InfraredWorkerSignal*, const uint32_t**, size_t*)),
API_METHOD(infrared_worker_rx_enable_blink_on_receiving, void, (InfraredWorker*, _Bool)),
API_METHOD(infrared_worker_rx_enable_signal_decoding, void, (InfraredWorker*, _Bool)),
API_METHOD(infrared_worker_rx_set_received_signal_callback, void, (InfraredWorker*, InfraredWorkerReceivedSignalCallback, void*)),
API_METHOD(infrared_worker_rx_start, void, (InfraredWorker*)),
API_METHOD(infrared_worker_rx_stop, void, (InfraredWorker*)),
API_METHOD(infrared_worker_set_decoded_signal, void, (InfraredWorker*, const InfraredMessage*)),
API_METHOD(infrared_worker_set_raw_signal, void, (InfraredWorker*, const uint32_t*, size_t)),
API_METHOD(infrared_worker_signal_is_decoded, _Bool, (const InfraredWorkerSignal*)),
API_METHOD(infrared_worker_tx_get_signal_steady_callback, InfraredWorkerGetSignalResponse, (void*, InfraredWorker*)),
API_METHOD(infrared_worker_tx_set_get_signal_callback, void, (InfraredWorker*, InfraredWorkerGetSignalCallback, void*)),
API_METHOD(infrared_worker_tx_set_signal_sent_callback, void, (InfraredWorker*, InfraredWorkerMessageSentCallback, void*)),
API_METHOD(infrared_worker_tx_start, void, (InfraredWorker*)),
API_METHOD(infrared_worker_tx_stop, void, (InfraredWorker*)),
API_METHOD(init_mutex, _Bool, (ValueMutex*, void*, size_t)),
API_METHOD(input_get_key_name, const char*, (InputKey)),
API_METHOD(input_get_type_name, const char*, (InputType)),
API_METHOD(itoa, char*, (int, char*, int)),
API_METHOD(lfrfid_dict_file_load, ProtocolId, (ProtocolDict*, const char*)),
API_METHOD(lfrfid_dict_file_save, _Bool, (ProtocolDict*, ProtocolId, const char*)),
API_METHOD(lfrfid_raw_file_alloc, LFRFIDRawFile*, (Storage*)),
API_METHOD(lfrfid_raw_file_free, void, (LFRFIDRawFile*)),
API_METHOD(lfrfid_raw_file_open_read, _Bool, (LFRFIDRawFile*, const char*)),
API_METHOD(lfrfid_raw_file_open_write, _Bool, (LFRFIDRawFile*, const char*)),
API_METHOD(lfrfid_raw_file_read_header, _Bool, (LFRFIDRawFile*, float*, float*)),
API_METHOD(lfrfid_raw_file_read_pair, _Bool, (LFRFIDRawFile*, uint32_t*, uint32_t*, _Bool*)),
API_METHOD(lfrfid_raw_file_write_buffer, _Bool, (LFRFIDRawFile*, uint8_t*, size_t)),
API_METHOD(lfrfid_raw_file_write_header, _Bool, (LFRFIDRawFile*, float, float, uint32_t)),
API_METHOD(lfrfid_raw_worker_alloc, LFRFIDRawWorker*, ()),
API_METHOD(lfrfid_raw_worker_free, void, (LFRFIDRawWorker*)),
API_METHOD(lfrfid_raw_worker_start_emulate, void, (LFRFIDRawWorker*, const char*, LFRFIDWorkerEmulateRawCallback, void*)),
API_METHOD(lfrfid_raw_worker_start_read, void, (LFRFIDRawWorker*, const char*, float, float, LFRFIDWorkerReadRawCallback, void*)),
API_METHOD(lfrfid_raw_worker_stop, void, (LFRFIDRawWorker*)),
API_METHOD(lfrfid_worker_alloc, LFRFIDWorker*, (ProtocolDict*)),
API_METHOD(lfrfid_worker_emulate_raw_start, void, (LFRFIDWorker*, const char*, LFRFIDWorkerEmulateRawCallback, void*)),
API_METHOD(lfrfid_worker_emulate_start, void, (LFRFIDWorker*, LFRFIDProtocol)),
API_METHOD(lfrfid_worker_free, void, (LFRFIDWorker*)),
API_METHOD(lfrfid_worker_read_raw_start, void, (LFRFIDWorker*, const char*, LFRFIDWorkerReadType, LFRFIDWorkerReadRawCallback, void*)),
API_METHOD(lfrfid_worker_read_start, void, (LFRFIDWorker*, LFRFIDWorkerReadType, LFRFIDWorkerReadCallback, void*)),
API_METHOD(lfrfid_worker_start_thread, void, (LFRFIDWorker*)),
API_METHOD(lfrfid_worker_stop, void, (LFRFIDWorker*)),
API_METHOD(lfrfid_worker_stop_thread, void, (LFRFIDWorker*)),
API_METHOD(lfrfid_worker_write_start, void, (LFRFIDWorker*, LFRFIDProtocol, LFRFIDWorkerWriteCallback, void*)),
API_METHOD(loader_get_pubsub, FuriPubSub*, (Loader*)),
API_METHOD(loader_is_locked, _Bool, (Loader*)),
API_METHOD(loader_lock, _Bool, (Loader*)),
API_METHOD(loader_show_menu, void, ()),
API_METHOD(loader_start, LoaderStatus, (Loader*, const char*, const char*)),
API_METHOD(loader_unlock, void, (Loader*)),
API_METHOD(loader_update_menu, void, ()),
API_METHOD(loading_alloc, Loading*, ()),
API_METHOD(loading_free, void, (Loading*)),
API_METHOD(loading_get_view, View*, (Loading*)),
API_METHOD(locale_celsius_to_fahrenheit, float, (float)),
API_METHOD(locale_fahrenheit_to_celsius, float, (float)),
API_METHOD(locale_format_date, void, (FuriString*, const FuriHalRtcDateTime*, const LocaleDateFormat, const char*)),
API_METHOD(locale_format_time, void, (FuriString*, const FuriHalRtcDateTime*, const LocaleTimeFormat, const _Bool)),
API_METHOD(locale_get_date_format, LocaleDateFormat, ()),
API_METHOD(locale_get_measurement_unit, LocaleMeasurementUnits, ()),
API_METHOD(locale_get_time_format, LocaleTimeFormat, ()),
API_METHOD(locale_set_date_format, void, (LocaleDateFormat)),
API_METHOD(locale_set_measurement_unit, void, (LocaleMeasurementUnits)),
API_METHOD(locale_set_time_format, void, (LocaleTimeFormat)),
API_METHOD(malloc, void*, (size_t)),
API_METHOD(manchester_advance, _Bool, (ManchesterState, ManchesterEvent, ManchesterState*, _Bool*)),
API_METHOD(manchester_encoder_advance, _Bool, (ManchesterEncoderState*, const _Bool, ManchesterEncoderResult*)),
API_METHOD(manchester_encoder_finish, ManchesterEncoderResult, (ManchesterEncoderState*)),
API_METHOD(manchester_encoder_reset, void, (ManchesterEncoderState*)),
API_METHOD(maxim_crc8, uint8_t, (const uint8_t*, const uint8_t, const uint8_t)),
API_METHOD(md5, void, (const unsigned char*, size_t, unsigned char[16])),
API_METHOD(md5_finish, void, (md5_context*, unsigned char[16])),
API_METHOD(md5_process, void, (md5_context*, const unsigned char[64])),
API_METHOD(md5_starts, void, (md5_context*)),
API_METHOD(md5_update, void, (md5_context*, const unsigned char*, size_t)),
API_METHOD(memchr, void*, (const void*, int, size_t)),
API_METHOD(memcmp, int, (const void*, const void*, size_t)),
API_METHOD(memcpy, void*, (void*, const void*, size_t)),
API_METHOD(memmgr_get_free_heap, size_t, ()),
API_METHOD(memmgr_get_minimum_free_heap, size_t, ()),
API_METHOD(memmgr_get_total_heap, size_t, ()),
API_METHOD(memmgr_heap_disable_thread_trace, void, (FuriThreadId)),
API_METHOD(memmgr_heap_enable_thread_trace, void, (FuriThreadId)),
API_METHOD(memmgr_heap_get_max_free_block, size_t, ()),
API_METHOD(memmgr_heap_get_thread_memory, size_t, (FuriThreadId)),
API_METHOD(memmgr_heap_printf_free_blocks, void, ()),
API_METHOD(memmove, void*, (void*, const void*, size_t)),
API_METHOD(memset, void*, (void*, int, size_t)),
API_METHOD(menu_add_item, void, (Menu*, const char*, const Icon*, uint32_t, MenuItemCallback, void*)),
API_METHOD(menu_alloc, Menu*, ()),
API_METHOD(menu_free, void, (Menu*)),
API_METHOD(menu_get_view, View*, (Menu*)),
API_METHOD(menu_reset, void, (Menu*)),
API_METHOD(menu_set_selected_item, void, (Menu*, uint32_t)),
API_METHOD(nfc_device_alloc, NfcDevice*, ()),
API_METHOD(nfc_device_clear, void, (NfcDevice*)),
API_METHOD(nfc_device_data_clear, void, (NfcDeviceData*)),
API_METHOD(nfc_device_delete, _Bool, (NfcDevice*, _Bool)),
API_METHOD(nfc_device_free, void, (NfcDevice*)),
API_METHOD(nfc_device_load, _Bool, (NfcDevice*, const char*, _Bool)),
API_METHOD(nfc_device_load_key_cache, _Bool, (NfcDevice*)),
API_METHOD(nfc_device_restore, _Bool, (NfcDevice*, _Bool)),
API_METHOD(nfc_device_save, _Bool, (NfcDevice*, const char*)),
API_METHOD(nfc_device_save_shadow, _Bool, (NfcDevice*, const char*)),
API_METHOD(nfc_device_set_loading_callback, void, (NfcDevice*, NfcLoadingCallback, void*)),
API_METHOD(nfc_device_set_name, void, (NfcDevice*, const char*)),
API_METHOD(nfc_file_select, _Bool, (NfcDevice*)),
API_METHOD(notification_internal_message, void, (NotificationApp*, const NotificationSequence*)),
API_METHOD(notification_internal_message_block, void, (NotificationApp*, const NotificationSequence*)),
API_METHOD(notification_message, void, (NotificationApp*, const NotificationSequence*)),
API_METHOD(notification_message_block, void, (NotificationApp*, const NotificationSequence*)),
API_METHOD(onewire_device_alloc, OneWireDevice*, (uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(onewire_device_attach, void, (OneWireDevice*, OneWireSlave*)),
API_METHOD(onewire_device_detach, void, (OneWireDevice*)),
API_METHOD(onewire_device_free, void, (OneWireDevice*)),
API_METHOD(onewire_device_get_id_p, uint8_t*, (OneWireDevice*)),
API_METHOD(onewire_device_send_id, void, (OneWireDevice*)),
API_METHOD(onewire_host_alloc, OneWireHost*, ()),
API_METHOD(onewire_host_free, void, (OneWireHost*)),
API_METHOD(onewire_host_read, uint8_t, (OneWireHost*)),
API_METHOD(onewire_host_read_bit, _Bool, (OneWireHost*)),
API_METHOD(onewire_host_read_bytes, void, (OneWireHost*, uint8_t*, uint16_t)),
API_METHOD(onewire_host_reset, _Bool, (OneWireHost*)),
API_METHOD(onewire_host_reset_search, void, (OneWireHost*)),
API_METHOD(onewire_host_search, uint8_t, (OneWireHost*, uint8_t*, OneWireHostSearchMode)),
API_METHOD(onewire_host_skip, void, (OneWireHost*)),
API_METHOD(onewire_host_start, void, (OneWireHost*)),
API_METHOD(onewire_host_stop, void, (OneWireHost*)),
API_METHOD(onewire_host_target_search, void, (OneWireHost*, uint8_t)),
API_METHOD(onewire_host_write, void, (OneWireHost*, uint8_t)),
API_METHOD(onewire_host_write_bit, void, (OneWireHost*, _Bool)),
API_METHOD(onewire_slave_alloc, OneWireSlave*, ()),
API_METHOD(onewire_slave_attach, void, (OneWireSlave*, OneWireDevice*)),
API_METHOD(onewire_slave_detach, void, (OneWireSlave*)),
API_METHOD(onewire_slave_free, void, (OneWireSlave*)),
API_METHOD(onewire_slave_set_result_callback, void, (OneWireSlave*, OneWireSlaveResultCallback, void*)),
API_METHOD(onewire_slave_start, void, (OneWireSlave*)),
API_METHOD(onewire_slave_stop, void, (OneWireSlave*)),
API_METHOD(path_append, void, (FuriString*, const char*)),
API_METHOD(path_concat, void, (const char*, const char*, FuriString*)),
API_METHOD(path_contains_only_ascii, _Bool, (const char*)),
API_METHOD(path_extract_basename, void, (const char*, FuriString*)),
API_METHOD(path_extract_dirname, void, (const char*, FuriString*)),
API_METHOD(path_extract_extension, void, (FuriString*, char*, size_t)),
API_METHOD(path_extract_filename, void, (FuriString*, FuriString*, _Bool)),
API_METHOD(path_extract_filename_no_ext, void, (const char*, FuriString*)),
API_METHOD(popup_alloc, Popup*, ()),
API_METHOD(popup_disable_timeout, void, (Popup*)),
API_METHOD(popup_enable_timeout, void, (Popup*)),
API_METHOD(popup_free, void, (Popup*)),
API_METHOD(popup_get_view, View*, (Popup*)),
API_METHOD(popup_reset, void, (Popup*)),
API_METHOD(popup_set_callback, void, (Popup*, PopupCallback)),
API_METHOD(popup_set_context, void, (Popup*, void*)),
API_METHOD(popup_set_header, void, (Popup*, const char*, uint8_t, uint8_t, Align, Align)),
API_METHOD(popup_set_icon, void, (Popup*, uint8_t, uint8_t, const Icon*)),
API_METHOD(popup_set_text, void, (Popup*, const char*, uint8_t, uint8_t, Align, Align)),
API_METHOD(popup_set_timeout, void, (Popup*, uint32_t)),
API_METHOD(power_get_info, void, (Power*, PowerInfo*)),
API_METHOD(power_get_pubsub, FuriPubSub*, (Power*)),
API_METHOD(power_get_settings_events_pubsub, FuriPubSub*, (Power*)),
API_METHOD(power_is_battery_healthy, _Bool, (Power*)),
API_METHOD(power_off, void, (Power*)),
API_METHOD(power_reboot, void, (PowerBootMode)),
API_METHOD(powf, float, (float, float)),
API_METHOD(property_value_out, void, (PropertyValueContext*, const char*, unsigned int, ...)),
API_METHOD(protocol_dict_alloc, ProtocolDict*, (const ProtocolBase**, size_t)),
API_METHOD(protocol_dict_decoders_feed, ProtocolId, (ProtocolDict*, _Bool, uint32_t)),
API_METHOD(protocol_dict_decoders_feed_by_feature, ProtocolId, (ProtocolDict*, uint32_t, _Bool, uint32_t)),
API_METHOD(protocol_dict_decoders_feed_by_id, ProtocolId, (ProtocolDict*, size_t, _Bool, uint32_t)),
API_METHOD(protocol_dict_decoders_start, void, (ProtocolDict*)),
API_METHOD(protocol_dict_encoder_start, _Bool, (ProtocolDict*, size_t)),
API_METHOD(protocol_dict_encoder_yield, LevelDuration, (ProtocolDict*, size_t)),
API_METHOD(protocol_dict_free, void, (ProtocolDict*)),
API_METHOD(protocol_dict_get_data, void, (ProtocolDict*, size_t, uint8_t*, size_t)),
API_METHOD(protocol_dict_get_data_size, size_t, (ProtocolDict*, size_t)),
API_METHOD(protocol_dict_get_features, uint32_t, (ProtocolDict*, size_t)),
API_METHOD(protocol_dict_get_manufacturer, const char*, (ProtocolDict*, size_t)),
API_METHOD(protocol_dict_get_max_data_size, size_t, (ProtocolDict*)),
API_METHOD(protocol_dict_get_name, const char*, (ProtocolDict*, size_t)),
API_METHOD(protocol_dict_get_protocol_by_name, ProtocolId, (ProtocolDict*, const char*)),
API_METHOD(protocol_dict_get_validate_count, uint32_t, (ProtocolDict*, size_t)),
API_METHOD(protocol_dict_get_write_data, _Bool, (ProtocolDict*, size_t, void*)),
API_METHOD(protocol_dict_render_brief_data, void, (ProtocolDict*, FuriString*, size_t)),
API_METHOD(protocol_dict_render_data, void, (ProtocolDict*, FuriString*, size_t)),
API_METHOD(protocol_dict_set_data, void, (ProtocolDict*, size_t, const uint8_t*, size_t)),
API_METHOD(rand, int, ()),
API_METHOD(random, long, ()),
API_METHOD(realloc, void*, (void*, size_t)),
API_METHOD(release_mutex, _Bool, (ValueMutex*, const void*)),
API_METHOD(rfalFieldOnAndStartGT, ReturnCode, ()),
API_METHOD(rfalLowPowerModeStart, ReturnCode, ()),
API_METHOD(rfalLowPowerModeStop, ReturnCode, ()),
API_METHOD(rfalWorker, void, ()),
API_METHOD(roundf, float, (float)),
API_METHOD(rpc_session_close, void, (RpcSession*)),
API_METHOD(rpc_session_feed, size_t, (RpcSession*, uint8_t*, size_t, TickType_t)),
API_METHOD(rpc_session_get_available_size, size_t, (RpcSession*)),
API_METHOD(rpc_session_open, RpcSession*, (Rpc*)),
API_METHOD(rpc_session_set_buffer_is_empty_callback, void, (RpcSession*, RpcBufferIsEmptyCallback)),
API_METHOD(rpc_session_set_close_callback, void, (RpcSession*, RpcSessionClosedCallback)),
API_METHOD(rpc_session_set_context, void, (RpcSession*, void*)),
API_METHOD(rpc_session_set_send_bytes_callback, void, (RpcSession*, RpcSendBytesCallback)),
API_METHOD(rpc_session_set_terminated_callback, void, (RpcSession*, RpcSessionTerminatedCallback)),
API_METHOD(rpc_system_app_confirm, void, (RpcAppSystem*, RpcAppSystemEvent, _Bool)),
API_METHOD(rpc_system_app_error_reset, void, (RpcAppSystem*)),
API_METHOD(rpc_system_app_exchange_data, void, (RpcAppSystem*, const uint8_t*, size_t)),
API_METHOD(rpc_system_app_get_data, const char*, (RpcAppSystem*)),
API_METHOD(rpc_system_app_send_exited, void, (RpcAppSystem*)),
API_METHOD(rpc_system_app_send_started, void, (RpcAppSystem*)),
API_METHOD(rpc_system_app_set_callback, void, (RpcAppSystem*, RpcAppSystemCallback, void*)),
API_METHOD(rpc_system_app_set_data_exchange_callback, void, (RpcAppSystem*, RpcAppSystemDataExchangeCallback, void*)),
API_METHOD(rpc_system_app_set_error_code, void, (RpcAppSystem*, uint32_t)),
API_METHOD(rpc_system_app_set_error_text, void, (RpcAppSystem*, const char*)),
API_METHOD(saved_struct_get_payload_size, _Bool, (const char*, uint8_t, uint8_t, size_t*)),
API_METHOD(saved_struct_load, _Bool, (const char*, void*, size_t, uint8_t, uint8_t)),
API_METHOD(saved_struct_save, _Bool, (const char*, void*, size_t, uint8_t, uint8_t)),
API_METHOD(scalbnf, float, (float, int)),
API_METHOD(scene_manager_alloc, SceneManager*, (const SceneManagerHandlers*, void*)),
API_METHOD(scene_manager_free, void, (SceneManager*)),
API_METHOD(scene_manager_get_scene_state, uint32_t, (SceneManager*, uint32_t)),
API_METHOD(scene_manager_handle_back_event, _Bool, (SceneManager*)),
API_METHOD(scene_manager_handle_custom_event, _Bool, (SceneManager*, uint32_t)),
API_METHOD(scene_manager_handle_tick_event, void, (SceneManager*)),
API_METHOD(scene_manager_has_previous_scene, _Bool, (SceneManager*, uint32_t)),
API_METHOD(scene_manager_next_scene, void, (SceneManager*, uint32_t)),
API_METHOD(scene_manager_previous_scene, _Bool, (SceneManager*)),
API_METHOD(scene_manager_search_and_switch_to_another_scene, _Bool, (SceneManager*, uint32_t)),
API_METHOD(scene_manager_search_and_switch_to_previous_scene, _Bool, (SceneManager*, uint32_t)),
API_METHOD(scene_manager_search_and_switch_to_previous_scene_one_of, _Bool, (SceneManager*, const uint32_t*, size_t)),
API_METHOD(scene_manager_set_scene_state, void, (SceneManager*, uint32_t, uint32_t)),
API_METHOD(scene_manager_stop, void, (SceneManager*)),
API_METHOD(sd_api_get_fs_type_text, const char*, (SDFsType)),
API_METHOD(serial_svc_set_rpc_status, void, (SerialServiceRpcStatus)),
API_METHOD(set_random_name, void, (char*, uint8_t)),
API_METHOD(sha256, void, (const unsigned char*, unsigned int, unsigned char[32])),
API_METHOD(sha256_finish, void, (sha256_context*, unsigned char[32])),
API_METHOD(sha256_process, void, (sha256_context*)),
API_METHOD(sha256_start, void, (sha256_context*)),
API_METHOD(sha256_update, void, (sha256_context*, const unsigned char*, unsigned int)),
API_METHOD(snprintf, int, (char*, size_t, const char*, ...)),
API_METHOD(srand, void, (unsigned)),
API_METHOD(sscanf, int, (const char*, const char*, ...)),
API_METHOD(storage_common_copy, FS_Error, (Storage*, const char*, const char*)),
API_METHOD(storage_common_fs_info, FS_Error, (Storage*, const char*, uint64_t*, uint64_t*)),
API_METHOD(storage_common_merge, FS_Error, (Storage*, const char*, const char*)),
API_METHOD(storage_common_mkdir, FS_Error, (Storage*, const char*)),
API_METHOD(storage_common_remove, FS_Error, (Storage*, const char*)),
API_METHOD(storage_common_rename, FS_Error, (Storage*, const char*, const char*)),
API_METHOD(storage_common_stat, FS_Error, (Storage*, const char*, FileInfo*)),
API_METHOD(storage_common_timestamp, FS_Error, (Storage*, const char*, uint32_t*)),
API_METHOD(storage_dir_close, _Bool, (File*)),
API_METHOD(storage_dir_open, _Bool, (File*, const char*)),
API_METHOD(storage_dir_read, _Bool, (File*, FileInfo*, char*, uint16_t)),
API_METHOD(storage_error_get_desc, const char*, (FS_Error)),
API_METHOD(storage_file_alloc, File*, (Storage*)),
API_METHOD(storage_file_close, _Bool, (File*)),
API_METHOD(storage_file_eof, _Bool, (File*)),
API_METHOD(storage_file_exists, _Bool, (Storage*, const char*)),
API_METHOD(storage_file_free, void, (File*)),
API_METHOD(storage_file_get_error, FS_Error, (File*)),
API_METHOD(storage_file_get_error_desc, const char*, (File*)),
API_METHOD(storage_file_is_dir, _Bool, (File*)),
API_METHOD(storage_file_is_open, _Bool, (File*)),
API_METHOD(storage_file_open, _Bool, (File*, const char*, FS_AccessMode, FS_OpenMode)),
API_METHOD(storage_file_read, uint16_t, (File*, void*, uint16_t)),
API_METHOD(storage_file_seek, _Bool, (File*, uint32_t, _Bool)),
API_METHOD(storage_file_size, uint64_t, (File*)),
API_METHOD(storage_file_tell, uint64_t, (File*)),
API_METHOD(storage_file_truncate, _Bool, (File*)),
API_METHOD(storage_file_write, uint16_t, (File*, const void*, uint16_t)),
API_METHOD(storage_get_next_filename, void, (Storage*, const char*, const char*, const char*, FuriString*, uint8_t)),
API_METHOD(storage_get_pubsub, FuriPubSub*, (Storage*)),
API_METHOD(storage_int_backup, FS_Error, (Storage*, const char*)),
API_METHOD(storage_int_restore, FS_Error, (Storage*, const char*, Storage_name_converter)),
API_METHOD(storage_sd_format, FS_Error, (Storage*)),
API_METHOD(storage_sd_info, FS_Error, (Storage*, SDInfo*)),
API_METHOD(storage_sd_status, FS_Error, (Storage*)),
API_METHOD(storage_sd_unmount, FS_Error, (Storage*)),
API_METHOD(storage_simply_mkdir, _Bool, (Storage*, const char*)),
API_METHOD(storage_simply_remove, _Bool, (Storage*, const char*)),
API_METHOD(storage_simply_remove_recursive, _Bool, (Storage*, const char*)),
API_METHOD(strcasestr, char*, (const char*, const char*)),
API_METHOD(strcat, char*, (char*, const char*)),
API_METHOD(strchr, char*, (const char*, int)),
API_METHOD(strcmp, int, (const char*, const char*)),
API_METHOD(strcpy, char*, (char*, const char*)),
API_METHOD(strcspn, size_t, (const char*, const char*)),
API_METHOD(strdup, char*, (const char*)),
API_METHOD(stream_clean, void, (Stream*)),
API_METHOD(stream_copy, size_t, (Stream*, Stream*, size_t)),
API_METHOD(stream_copy_full, size_t, (Stream*, Stream*)),
API_METHOD(stream_delete, _Bool, (Stream*, size_t)),
API_METHOD(stream_delete_and_insert, _Bool, (Stream*, size_t, StreamWriteCB, const void*)),
API_METHOD(stream_delete_and_insert_char, _Bool, (Stream*, size_t, char)),
API_METHOD(stream_delete_and_insert_cstring, _Bool, (Stream*, size_t, const char*)),
API_METHOD(stream_delete_and_insert_format, _Bool, (Stream*, size_t, const char*, ...)),
API_METHOD(stream_delete_and_insert_string, _Bool, (Stream*, size_t, FuriString*)),
API_METHOD(stream_delete_and_insert_vaformat, _Bool, (Stream*, size_t, const char*, va_list)),
API_METHOD(stream_dump_data, void, (Stream*)),
API_METHOD(stream_eof, _Bool, (Stream*)),
API_METHOD(stream_free, void, (Stream*)),
API_METHOD(stream_insert, _Bool, (Stream*, const uint8_t*, size_t)),
API_METHOD(stream_insert_char, _Bool, (Stream*, char)),
API_METHOD(stream_insert_cstring, _Bool, (Stream*, const char*)),
API_METHOD(stream_insert_format, _Bool, (Stream*, const char*, ...)),
API_METHOD(stream_insert_string, _Bool, (Stream*, FuriString*)),
API_METHOD(stream_insert_vaformat, _Bool, (Stream*, const char*, va_list)),
API_METHOD(stream_load_from_file, size_t, (Stream*, Storage*, const char*)),
API_METHOD(stream_read, size_t, (Stream*, uint8_t*, size_t)),
API_METHOD(stream_read_line, _Bool, (Stream*, FuriString*)),
API_METHOD(stream_rewind, _Bool, (Stream*)),
API_METHOD(stream_save_to_file, size_t, (Stream*, Storage*, const char*, FS_OpenMode)),
API_METHOD(stream_seek, _Bool, (Stream*, int32_t, StreamOffset)),
API_METHOD(stream_seek_to_char, _Bool, (Stream*, char, StreamDirection)),
API_METHOD(stream_size, size_t, (Stream*)),
API_METHOD(stream_split, _Bool, (Stream*, Stream*, Stream*)),
API_METHOD(stream_tell, size_t, (Stream*)),
API_METHOD(stream_write, size_t, (Stream*, const uint8_t*, size_t)),
API_METHOD(stream_write_char, size_t, (Stream*, char)),
API_METHOD(stream_write_cstring, size_t, (Stream*, const char*)),
API_METHOD(stream_write_format, size_t, (Stream*, const char*, ...)),
API_METHOD(stream_write_string, size_t, (Stream*, FuriString*)),
API_METHOD(stream_write_vaformat, size_t, (Stream*, const char*, va_list)),
API_METHOD(string_stream_alloc, Stream*, ()),
API_METHOD(strlcpy, size_t, (char*, const char*, size_t)),
API_METHOD(strlen, size_t, (const char*)),
API_METHOD(strncasecmp, int, (const char*, const char*, size_t)),
API_METHOD(strncmp, int, (const char*, const char*, size_t)),
API_METHOD(strncpy, char*, (char*, const char*, size_t)),
API_METHOD(strrchr, char*, (const char*, int)),
API_METHOD(strspn, size_t, (const char*, const char*)),
API_METHOD(strstr, char*, (const char*, const char*)),
API_METHOD(strtof, float, (const char*, char**)),
API_METHOD(strtok, char*, (char*, const char*)),
API_METHOD(strtol, long, (const char*, char**, int)),
API_METHOD(strtoul, unsigned long, (const char*, char**, int)),
API_METHOD(strtoull, unsigned long long, (const char*, char**, int)),
API_METHOD(subghz_block_generic_deserialize, _Bool, (SubGhzBlockGeneric*, FlipperFormat*)),
API_METHOD(subghz_block_generic_get_preset_name, void, (const char*, FuriString*)),
API_METHOD(subghz_block_generic_serialize, _Bool, (SubGhzBlockGeneric*, FlipperFormat*, SubGhzRadioPreset*)),
API_METHOD(subghz_environment_alloc, SubGhzEnvironment*, ()),
API_METHOD(subghz_environment_free, void, (SubGhzEnvironment*)),
API_METHOD(subghz_environment_get_came_atomo_rainbow_table_file_name, const char*, (SubGhzEnvironment*)),
API_METHOD(subghz_environment_get_keystore, SubGhzKeystore*, (SubGhzEnvironment*)),
API_METHOD(subghz_environment_get_nice_flor_s_rainbow_table_file_name, const char*, (SubGhzEnvironment*)),
API_METHOD(subghz_environment_get_protocol_name_registry, const char*, (SubGhzEnvironment*, size_t)),
API_METHOD(subghz_environment_get_protocol_registry, void*, (SubGhzEnvironment*)),
API_METHOD(subghz_environment_load_keystore, _Bool, (SubGhzEnvironment*, const char*)),
API_METHOD(subghz_environment_set_came_atomo_rainbow_table_file_name, void, (SubGhzEnvironment*, const char*)),
API_METHOD(subghz_environment_set_nice_flor_s_rainbow_table_file_name, void, (SubGhzEnvironment*, const char*)),
API_METHOD(subghz_environment_set_protocol_registry, void, (SubGhzEnvironment*, void*)),
API_METHOD(subghz_protocol_blocks_add_bit, void, (SubGhzBlockDecoder*, uint8_t)),
API_METHOD(subghz_protocol_blocks_add_bytes, uint8_t, (const uint8_t[], size_t)),
API_METHOD(subghz_protocol_blocks_add_to_128_bit, void, (SubGhzBlockDecoder*, uint8_t, uint64_t*)),
API_METHOD(subghz_protocol_blocks_crc16, uint16_t, (const uint8_t[], size_t, uint16_t, uint16_t)),
API_METHOD(subghz_protocol_blocks_crc16lsb, uint16_t, (const uint8_t[], size_t, uint16_t, uint16_t)),
API_METHOD(subghz_protocol_blocks_crc4, uint8_t, (const uint8_t[], size_t, uint8_t, uint8_t)),
API_METHOD(subghz_protocol_blocks_crc7, uint8_t, (const uint8_t[], size_t, uint8_t, uint8_t)),
API_METHOD(subghz_protocol_blocks_crc8, uint8_t, (const uint8_t[], size_t, uint8_t, uint8_t)),
API_METHOD(subghz_protocol_blocks_crc8le, uint8_t, (const uint8_t[], size_t, uint8_t, uint8_t)),
API_METHOD(subghz_protocol_blocks_get_bit_array, _Bool, (uint8_t[], size_t)),
API_METHOD(subghz_protocol_blocks_get_hash_data, uint8_t, (SubGhzBlockDecoder*, size_t)),
API_METHOD(subghz_protocol_blocks_get_parity, uint8_t, (uint64_t, uint8_t)),
API_METHOD(subghz_protocol_blocks_get_upload, size_t, (uint8_t[], size_t, LevelDuration*, size_t, uint32_t)),
API_METHOD(subghz_protocol_blocks_lfsr_digest16, uint16_t, (const uint8_t[], size_t, uint16_t, uint16_t)),
API_METHOD(subghz_protocol_blocks_lfsr_digest8, uint8_t, (const uint8_t[], size_t, uint8_t, uint8_t)),
API_METHOD(subghz_protocol_blocks_lfsr_digest8_reflect, uint8_t, (const uint8_t[], size_t, uint8_t, uint8_t)),
API_METHOD(subghz_protocol_blocks_parity8, uint8_t, (uint8_t)),
API_METHOD(subghz_protocol_blocks_parity_bytes, uint8_t, (const uint8_t[], size_t)),
API_METHOD(subghz_protocol_blocks_reverse_key, uint64_t, (uint64_t, uint8_t)),
API_METHOD(subghz_protocol_blocks_set_bit_array, void, (_Bool, uint8_t[], size_t, size_t)),
API_METHOD(subghz_protocol_blocks_xor_bytes, uint8_t, (const uint8_t[], size_t)),
API_METHOD(subghz_protocol_decoder_base_deserialize, _Bool, (SubGhzProtocolDecoderBase*, FlipperFormat*)),
API_METHOD(subghz_protocol_decoder_base_get_hash_data, uint8_t, (SubGhzProtocolDecoderBase*)),
API_METHOD(subghz_protocol_decoder_base_get_string, _Bool, (SubGhzProtocolDecoderBase*, FuriString*)),
API_METHOD(subghz_protocol_decoder_base_serialize, _Bool, (SubGhzProtocolDecoderBase*, FlipperFormat*, SubGhzRadioPreset*)),
API_METHOD(subghz_protocol_decoder_princeton_alloc, void*, (SubGhzEnvironment*)),
API_METHOD(subghz_protocol_decoder_princeton_deserialize, _Bool, (void*, FlipperFormat*)),
API_METHOD(subghz_protocol_decoder_princeton_feed, void, (void*, _Bool, uint32_t)),
API_METHOD(subghz_protocol_decoder_princeton_free, void, (void*)),
API_METHOD(subghz_protocol_decoder_princeton_get_hash_data, uint8_t, (void*)),
API_METHOD(subghz_protocol_decoder_princeton_get_string, void, (void*, FuriString*)),
API_METHOD(subghz_protocol_decoder_princeton_reset, void, (void*)),
API_METHOD(subghz_protocol_decoder_princeton_serialize, _Bool, (void*, FlipperFormat*, SubGhzRadioPreset*)),
API_METHOD(subghz_protocol_decoder_raw_alloc, void*, (SubGhzEnvironment*)),
API_METHOD(subghz_protocol_decoder_raw_deserialize, _Bool, (void*, FlipperFormat*)),
API_METHOD(subghz_protocol_decoder_raw_feed, void, (void*, _Bool, uint32_t)),
API_METHOD(subghz_protocol_decoder_raw_free, void, (void*)),
API_METHOD(subghz_protocol_decoder_raw_get_hash_data, uint8_t, (void*)),
API_METHOD(subghz_protocol_decoder_raw_get_string, void, (void*, FuriString*)),
API_METHOD(subghz_protocol_decoder_raw_reset, void, (void*)),
API_METHOD(subghz_protocol_decoder_raw_serialize, _Bool, (void*, FlipperFormat*, SubGhzRadioPreset*)),
API_METHOD(subghz_protocol_decoder_raw_set_auto_mode, void, (void*, _Bool)),
API_METHOD(subghz_protocol_decoder_raw_set_rssi_threshold, void, (void*, int)),
API_METHOD(subghz_protocol_decoder_raw_write_data, _Bool, (void*, _Bool, uint32_t)),
API_METHOD(subghz_protocol_encoder_princeton_alloc, void*, (SubGhzEnvironment*)),
API_METHOD(subghz_protocol_encoder_princeton_deserialize, _Bool, (void*, FlipperFormat*)),
API_METHOD(subghz_protocol_encoder_princeton_free, void, (void*)),
API_METHOD(subghz_protocol_encoder_princeton_stop, void, (void*)),
API_METHOD(subghz_protocol_encoder_princeton_yield, LevelDuration, (void*)),
API_METHOD(subghz_protocol_encoder_raw_alloc, void*, (SubGhzEnvironment*)),
API_METHOD(subghz_protocol_encoder_raw_deserialize, _Bool, (void*, FlipperFormat*)),
API_METHOD(subghz_protocol_encoder_raw_free, void, (void*)),
API_METHOD(subghz_protocol_encoder_raw_stop, void, (void*)),
API_METHOD(subghz_protocol_encoder_raw_yield, LevelDuration, (void*)),
API_METHOD(subghz_protocol_raw_file_encoder_worker_set_callback_end, void, (SubGhzProtocolEncoderRAW*, SubGhzProtocolEncoderRAWCallbackEnd, void*)),
API_METHOD(subghz_protocol_raw_gen_fff_data, void, (FlipperFormat*, const char*)),
API_METHOD(subghz_protocol_raw_get_sample_write, size_t, (SubGhzProtocolDecoderRAW*)),
API_METHOD(subghz_protocol_raw_save_to_file_init, _Bool, (SubGhzProtocolDecoderRAW*, const char*, SubGhzRadioPreset*)),
API_METHOD(subghz_protocol_raw_save_to_file_pause, void, (SubGhzProtocolDecoderRAW*, _Bool)),
API_METHOD(subghz_protocol_raw_save_to_file_stop, void, (SubGhzProtocolDecoderRAW*)),
API_METHOD(subghz_protocol_registry_count, size_t, (const SubGhzProtocolRegistry*)),
API_METHOD(subghz_protocol_registry_get_by_index, const SubGhzProtocol*, (const SubGhzProtocolRegistry*, size_t)),
API_METHOD(subghz_protocol_registry_get_by_name, const SubGhzProtocol*, (const SubGhzProtocolRegistry*, const char*)),
API_METHOD(subghz_receiver_alloc_init, SubGhzReceiver*, (SubGhzEnvironment*)),
API_METHOD(subghz_receiver_decode, void, (SubGhzReceiver*, _Bool, uint32_t)),
API_METHOD(subghz_receiver_free, void, (SubGhzReceiver*)),
API_METHOD(subghz_receiver_get_filter, SubGhzProtocolFlag, (SubGhzReceiver*)),
API_METHOD(subghz_receiver_reset, void, (SubGhzReceiver*)),
API_METHOD(subghz_receiver_search_decoder_base_by_name, SubGhzProtocolDecoderBase*, (SubGhzReceiver*, const char*)),
API_METHOD(subghz_receiver_set_filter, void, (SubGhzReceiver*, SubGhzProtocolFlag)),
API_METHOD(subghz_receiver_set_rx_callback, void, (SubGhzReceiver*, SubGhzReceiverCallback, void*)),
API_METHOD(subghz_setting_alloc, SubGhzSetting*, ()),
API_METHOD(subghz_setting_delete_custom_preset, _Bool, (SubGhzSetting*, const char*)),
API_METHOD(subghz_setting_free, void, (SubGhzSetting*)),
API_METHOD(subghz_setting_get_default_frequency, uint32_t, (SubGhzSetting*)),
API_METHOD(subghz_setting_get_frequency, uint32_t, (SubGhzSetting*, size_t)),
API_METHOD(subghz_setting_get_frequency_count, size_t, (SubGhzSetting*)),
API_METHOD(subghz_setting_get_frequency_default_index, uint32_t, (SubGhzSetting*)),
API_METHOD(subghz_setting_get_hopper_frequency, uint32_t, (SubGhzSetting*, size_t)),
API_METHOD(subghz_setting_get_hopper_frequency_count, size_t, (SubGhzSetting*)),
API_METHOD(subghz_setting_get_inx_preset_by_name, int, (SubGhzSetting*, const char*)),
API_METHOD(subghz_setting_get_preset_count, size_t, (SubGhzSetting*)),
API_METHOD(subghz_setting_get_preset_data, uint8_t*, (SubGhzSetting*, size_t)),
API_METHOD(subghz_setting_get_preset_data_by_name, uint8_t*, (SubGhzSetting*, const char*)),
API_METHOD(subghz_setting_get_preset_data_size, size_t, (SubGhzSetting*, size_t)),
API_METHOD(subghz_setting_get_preset_name, const char*, (SubGhzSetting*, size_t)),
API_METHOD(subghz_setting_load, void, (SubGhzSetting*, const char*)),
API_METHOD(subghz_setting_load_custom_preset, _Bool, (SubGhzSetting*, const char*, FlipperFormat*)),
API_METHOD(subghz_setting_set_default_frequency, void, (SubGhzSetting*, uint32_t)),
API_METHOD(subghz_transmitter_alloc_init, SubGhzTransmitter*, (SubGhzEnvironment*, const char*)),
API_METHOD(subghz_transmitter_deserialize, _Bool, (SubGhzTransmitter*, FlipperFormat*)),
API_METHOD(subghz_transmitter_free, void, (SubGhzTransmitter*)),
API_METHOD(subghz_transmitter_get_protocol_instance, SubGhzProtocolEncoderBase*, (SubGhzTransmitter*)),
API_METHOD(subghz_transmitter_stop, _Bool, (SubGhzTransmitter*)),
API_METHOD(subghz_transmitter_yield, LevelDuration, (void*)),
API_METHOD(subghz_tx_rx_worker_alloc, SubGhzTxRxWorker*, ()),
API_METHOD(subghz_tx_rx_worker_available, size_t, (SubGhzTxRxWorker*)),
API_METHOD(subghz_tx_rx_worker_free, void, (SubGhzTxRxWorker*)),
API_METHOD(subghz_tx_rx_worker_is_running, _Bool, (SubGhzTxRxWorker*)),
API_METHOD(subghz_tx_rx_worker_read, size_t, (SubGhzTxRxWorker*, uint8_t*, size_t)),
API_METHOD(subghz_tx_rx_worker_set_callback_have_read, void, (SubGhzTxRxWorker*, SubGhzTxRxWorkerCallbackHaveRead, void*)),
API_METHOD(subghz_tx_rx_worker_start, _Bool, (SubGhzTxRxWorker*, uint32_t)),
API_METHOD(subghz_tx_rx_worker_stop, void, (SubGhzTxRxWorker*)),
API_METHOD(subghz_tx_rx_worker_write, _Bool, (SubGhzTxRxWorker*, uint8_t*, size_t)),
API_METHOD(subghz_worker_alloc, SubGhzWorker*, ()),
API_METHOD(subghz_worker_free, void, (SubGhzWorker*)),
API_METHOD(subghz_worker_is_running, _Bool, (SubGhzWorker*)),
API_METHOD(subghz_worker_rx_callback, void, (_Bool, uint32_t, void*)),
API_METHOD(subghz_worker_set_context, void, (SubGhzWorker*, void*)),
API_METHOD(subghz_worker_set_overrun_callback, void, (SubGhzWorker*, SubGhzWorkerOverrunCallback)),
API_METHOD(subghz_worker_set_pair_callback, void, (SubGhzWorker*, SubGhzWorkerPairCallback)),
API_METHOD(subghz_worker_start, void, (SubGhzWorker*)),
API_METHOD(subghz_worker_stop, void, (SubGhzWorker*)),
API_METHOD(submenu_add_item, void, (Submenu*, const char*, uint32_t, SubmenuItemCallback, void*)),
API_METHOD(submenu_alloc, Submenu*, ()),
API_METHOD(submenu_free, void, (Submenu*)),
API_METHOD(submenu_get_view, View*, (Submenu*)),
API_METHOD(submenu_reset, void, (Submenu*)),
API_METHOD(submenu_set_header, void, (Submenu*, const char*)),
API_METHOD(submenu_set_selected_item, void, (Submenu*, uint32_t)),
API_METHOD(t5577_write, void, (LFRFIDT5577*)),
API_METHOD(tar_archive_add_dir, _Bool, (TarArchive*, const char*, const char*)),
API_METHOD(tar_archive_add_file, _Bool, (TarArchive*, const char*, const char*, const int32_t)),
API_METHOD(tar_archive_alloc, TarArchive*, (Storage*)),
API_METHOD(tar_archive_dir_add_element, _Bool, (TarArchive*, const char*)),
API_METHOD(tar_archive_file_add_data_block, _Bool, (TarArchive*, const uint8_t*, const int32_t)),
API_METHOD(tar_archive_file_add_header, _Bool, (TarArchive*, const char*, const int32_t)),
API_METHOD(tar_archive_file_finalize, _Bool, (TarArchive*)),
API_METHOD(tar_archive_finalize, _Bool, (TarArchive*)),
API_METHOD(tar_archive_free, void, (TarArchive*)),
API_METHOD(tar_archive_get_entries_count, int32_t, (TarArchive*)),
API_METHOD(tar_archive_open, _Bool, (TarArchive*, const char*, TarOpenMode)),
API_METHOD(tar_archive_set_file_callback, void, (TarArchive*, tar_unpack_file_cb, void*)),
API_METHOD(tar_archive_store_data, _Bool, (TarArchive*, const char*, const uint8_t*, const int32_t)),
API_METHOD(tar_archive_unpack_file, _Bool, (TarArchive*, const char*, const char*)),
API_METHOD(tar_archive_unpack_to, _Bool, (TarArchive*, const char*, Storage_name_converter)),
API_METHOD(text_box_alloc, TextBox*, ()),
API_METHOD(text_box_free, void, (TextBox*)),
API_METHOD(text_box_get_view, View*, (TextBox*)),
API_METHOD(text_box_reset, void, (TextBox*)),
API_METHOD(text_box_set_focus, void, (TextBox*, TextBoxFocus)),
API_METHOD(text_box_set_font, void, (TextBox*, TextBoxFont)),
API_METHOD(text_box_set_text, void, (TextBox*, const char*)),
API_METHOD(text_input_alloc, TextInput*, ()),
API_METHOD(text_input_free, void, (TextInput*)),
API_METHOD(text_input_get_validator_callback, TextInputValidatorCallback, (TextInput*)),
API_METHOD(text_input_get_validator_callback_context, void*, (TextInput*)),
API_METHOD(text_input_get_view, View*, (TextInput*)),
API_METHOD(text_input_reset, void, (TextInput*)),
API_METHOD(text_input_set_header_text, void, (TextInput*, const char*)),
API_METHOD(text_input_set_result_callback, void, (TextInput*, TextInputCallback, void*, char*, size_t, _Bool)),
API_METHOD(text_input_set_validator, void, (TextInput*, TextInputValidatorCallback, void*)),
API_METHOD(timerCalculateTimer, uint32_t, (uint16_t)),
API_METHOD(timerIsExpired, _Bool, (uint32_t)),
API_METHOD(u8g2_DrawHLine, void, (u8g2_t*, u8g2_uint_t, u8g2_uint_t, u8g2_uint_t)),
API_METHOD(u8g2_SetFont, void, (u8g2_t*, const uint8_t*)),
API_METHOD(uECC_compute_public_key, int, (const uint8_t*, uint8_t*, uECC_Curve)),
API_METHOD(uECC_secp256r1, uECC_Curve, ()),
API_METHOD(uECC_set_rng, void, (uECC_RNG_Function)),
API_METHOD(uECC_sign, int, (const uint8_t*, const uint8_t*, unsigned, uint8_t*, uECC_Curve)),
API_METHOD(uxTaskPriorityGet, UBaseType_t, (const TaskHandle_t)),
API_METHOD(vPortEnterCritical, void, ()),
API_METHOD(vPortExitCritical, void, ()),
API_METHOD(vStreamBufferDelete, void, (StreamBufferHandle_t)),
API_METHOD(vTaskPrioritySet, void, (TaskHandle_t, UBaseType_t)),
API_METHOD(validator_is_file_alloc_init, ValidatorIsFile*, (const char*, const char*, const char*)),
API_METHOD(validator_is_file_callback, _Bool, (const char*, FuriString*, void*)),
API_METHOD(validator_is_file_free, void, (ValidatorIsFile*)),
API_METHOD(value_index_bool, uint8_t, (const _Bool, const _Bool[], uint8_t)),
API_METHOD(value_index_float, uint8_t, (const float, const float[], uint8_t)),
API_METHOD(value_index_uint32, uint8_t, (const uint32_t, const uint32_t[], uint8_t)),
API_METHOD(variable_item_get_context, void*, (VariableItem*)),
API_METHOD(variable_item_get_current_value_index, uint8_t, (VariableItem*)),
API_METHOD(variable_item_list_add, VariableItem*, (VariableItemList*, const char*, uint8_t, VariableItemChangeCallback, void*)),
API_METHOD(variable_item_list_alloc, VariableItemList*, ()),
API_METHOD(variable_item_list_free, void, (VariableItemList*)),
API_METHOD(variable_item_list_get_selected_item_index, uint8_t, (VariableItemList*)),
API_METHOD(variable_item_list_get_view, View*, (VariableItemList*)),
API_METHOD(variable_item_list_reset, void, (VariableItemList*)),
API_METHOD(variable_item_list_set_enter_callback, void, (VariableItemList*, VariableItemListEnterCallback, void*)),
API_METHOD(variable_item_list_set_selected_item, void, (VariableItemList*, uint8_t)),
API_METHOD(variable_item_set_current_value_index, void, (VariableItem*, uint8_t)),
API_METHOD(variable_item_set_current_value_text, void, (VariableItem*, const char*)),
API_METHOD(variable_item_set_values_count, void, (VariableItem*, uint8_t)),
API_METHOD(version_get, const Version*, ()),
API_METHOD(version_get_builddate, const char*, (const Version*)),
API_METHOD(version_get_custom_name, const char*, (const Version*)),
API_METHOD(version_get_dirty_flag, _Bool, (const Version*)),
API_METHOD(version_get_gitbranch, const char*, (const Version*)),
API_METHOD(version_get_gitbranchnum, const char*, (const Version*)),
API_METHOD(version_get_githash, const char*, (const Version*)),
API_METHOD(version_get_target, uint8_t, (const Version*)),
API_METHOD(version_get_version, const char*, (const Version*)),
API_METHOD(view_alloc, View*, ()),
API_METHOD(view_allocate_model, void, (View*, ViewModelType, size_t)),
API_METHOD(view_commit_model, void, (View*, _Bool)),
API_METHOD(view_dispatcher_add_view, void, (ViewDispatcher*, uint32_t, View*)),
API_METHOD(view_dispatcher_alloc, ViewDispatcher*, ()),
API_METHOD(view_dispatcher_attach_to_gui, void, (ViewDispatcher*, Gui*, ViewDispatcherType)),
API_METHOD(view_dispatcher_enable_queue, void, (ViewDispatcher*)),
API_METHOD(view_dispatcher_free, void, (ViewDispatcher*)),
API_METHOD(view_dispatcher_remove_view, void, (ViewDispatcher*, uint32_t)),
API_METHOD(view_dispatcher_run, void, (ViewDispatcher*)),
API_METHOD(view_dispatcher_send_custom_event, void, (ViewDispatcher*, uint32_t)),
API_METHOD(view_dispatcher_send_to_back, void, (ViewDispatcher*)),
API_METHOD(view_dispatcher_send_to_front, void, (ViewDispatcher*)),
API_METHOD(view_dispatcher_set_custom_event_callback, void, (ViewDispatcher*, ViewDispatcherCustomEventCallback)),
API_METHOD(view_dispatcher_set_event_callback_context, void, (ViewDispatcher*, void*)),
API_METHOD(view_dispatcher_set_navigation_event_callback, void, (ViewDispatcher*, ViewDispatcherNavigationEventCallback)),
API_METHOD(view_dispatcher_set_tick_event_callback, void, (ViewDispatcher*, ViewDispatcherTickEventCallback, uint32_t)),
API_METHOD(view_dispatcher_stop, void, (ViewDispatcher*)),
API_METHOD(view_dispatcher_switch_to_view, void, (ViewDispatcher*, uint32_t)),
API_METHOD(view_free, void, (View*)),
API_METHOD(view_free_model, void, (View*)),
API_METHOD(view_get_model, void*, (View*)),
API_METHOD(view_port_alloc, ViewPort*, ()),
API_METHOD(view_port_draw_callback_set, void, (ViewPort*, ViewPortDrawCallback, void*)),
API_METHOD(view_port_enabled_set, void, (ViewPort*, _Bool)),
API_METHOD(view_port_free, void, (ViewPort*)),
API_METHOD(view_port_get_height, uint8_t, (ViewPort*)),
API_METHOD(view_port_get_orientation, ViewPortOrientation, (const ViewPort*)),
API_METHOD(view_port_get_width, uint8_t, (ViewPort*)),
API_METHOD(view_port_input_callback_set, void, (ViewPort*, ViewPortInputCallback, void*)),
API_METHOD(view_port_is_enabled, _Bool, (ViewPort*)),
API_METHOD(view_port_set_height, void, (ViewPort*, uint8_t)),
API_METHOD(view_port_set_orientation, void, (ViewPort*, ViewPortOrientation)),
API_METHOD(view_port_set_width, void, (ViewPort*, uint8_t)),
API_METHOD(view_port_update, void, (ViewPort*)),
API_METHOD(view_set_context, void, (View*, void*)),
API_METHOD(view_set_custom_callback, void, (View*, ViewCustomCallback)),
API_METHOD(view_set_draw_callback, void, (View*, ViewDrawCallback)),
API_METHOD(view_set_enter_callback, void, (View*, ViewCallback)),
API_METHOD(view_set_exit_callback, void, (View*, ViewCallback)),
API_METHOD(view_set_input_callback, void, (View*, ViewInputCallback)),
API_METHOD(view_set_orientation, void, (View*, ViewOrientation)),
API_METHOD(view_set_previous_callback, void, (View*, ViewNavigationCallback)),
API_METHOD(view_set_update_callback, void, (View*, ViewUpdateCallback)),
API_METHOD(view_set_update_callback_context, void, (View*, void*)),
API_METHOD(view_stack_add_view, void, (ViewStack*, View*)),
API_METHOD(view_stack_alloc, ViewStack*, ()),
API_METHOD(view_stack_free, void, (ViewStack*)),
API_METHOD(view_stack_get_view, View*, (ViewStack*)),
API_METHOD(view_stack_remove_view, void, (ViewStack*, View*)),
API_METHOD(view_tie_icon_animation, void, (View*, IconAnimation*)),
API_METHOD(widget_add_button_element, void, (Widget*, GuiButtonType, const char*, ButtonCallback, void*)),
API_METHOD(widget_add_frame_element, void, (Widget*, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t)),
API_METHOD(widget_add_icon_element, void, (Widget*, uint8_t, uint8_t, const Icon*)),
API_METHOD(widget_add_string_element, void, (Widget*, uint8_t, uint8_t, Align, Align, Font, const char*)),
API_METHOD(widget_add_string_multiline_element, void, (Widget*, uint8_t, uint8_t, Align, Align, Font, const char*)),
API_METHOD(widget_add_text_box_element, void, (Widget*, uint8_t, uint8_t, uint8_t, uint8_t, Align, Align, const char*, _Bool)),
API_METHOD(widget_add_text_scroll_element, void, (Widget*, uint8_t, uint8_t, uint8_t, uint8_t, const char*)),
API_METHOD(widget_alloc, Widget*, ()),
API_METHOD(widget_free, void, (Widget*)),
API_METHOD(widget_get_view, View*, (Widget*)),
API_METHOD(widget_reset, void, (Widget*)),
API_METHOD(xStreamBufferGenericCreate, StreamBufferHandle_t, (size_t, size_t, BaseType_t)),
API_METHOD(xStreamBufferReceive, size_t, (StreamBufferHandle_t, void*, size_t, TickType_t)),
API_METHOD(xStreamBufferSendFromISR, size_t, (StreamBufferHandle_t, const void*, size_t, BaseType_t*)),
API_METHOD(xTaskGetHandle, TaskHandle_t, (const char*)),
API_METHOD(xTaskGetSchedulerState, BaseType_t, ()),
API_METHOD(xTaskGetTickCount, TickType_t, ()),
API_VARIABLE(SystemCoreClock, uint32_t),
API_VARIABLE(_ctype_, const char[]),
API_VARIABLE(_global_impure_ptr, _reent*),
API_VARIABLE(_impure_ptr, _reent*),
API_VARIABLE(cli_vcp, CliSession),
API_VARIABLE(furi_hal_i2c_bus_external, FuriHalI2cBus),
API_VARIABLE(furi_hal_i2c_bus_power, FuriHalI2cBus),
API_VARIABLE(furi_hal_i2c_handle_external, FuriHalI2cBusHandle),
API_VARIABLE(furi_hal_i2c_handle_power, FuriHalI2cBusHandle),
API_VARIABLE(furi_hal_sd_spi_handle, FuriHalSpiBusHandle*),
API_VARIABLE(furi_hal_spi_bus_d, FuriHalSpiBus),
API_VARIABLE(furi_hal_spi_bus_handle_display, FuriHalSpiBusHandle),
API_VARIABLE(furi_hal_spi_bus_handle_external, FuriHalSpiBusHandle),
API_VARIABLE(furi_hal_spi_bus_handle_nfc, FuriHalSpiBusHandle),
API_VARIABLE(furi_hal_spi_bus_handle_sd_fast, FuriHalSpiBusHandle),
API_VARIABLE(furi_hal_spi_bus_handle_sd_slow, FuriHalSpiBusHandle),
API_VARIABLE(furi_hal_spi_bus_handle_subghz, FuriHalSpiBusHandle),
API_VARIABLE(furi_hal_spi_bus_r, FuriHalSpiBus),
API_VARIABLE(furi_hal_spi_preset_1edge_low_16m, const LL_SPI_InitTypeDef),
API_VARIABLE(furi_hal_spi_preset_1edge_low_2m, const LL_SPI_InitTypeDef),
API_VARIABLE(furi_hal_spi_preset_1edge_low_4m, const LL_SPI_InitTypeDef),
API_VARIABLE(furi_hal_spi_preset_1edge_low_8m, const LL_SPI_InitTypeDef),
API_VARIABLE(furi_hal_spi_preset_2edge_low_8m, const LL_SPI_InitTypeDef),
API_VARIABLE(gpio_button_back, const GpioPin),
API_VARIABLE(gpio_button_down, const GpioPin),
API_VARIABLE(gpio_button_left, const GpioPin),
API_VARIABLE(gpio_button_ok, const GpioPin),
API_VARIABLE(gpio_button_right, const GpioPin),
API_VARIABLE(gpio_button_up, const GpioPin),
API_VARIABLE(gpio_cc1101_g0, const GpioPin),
API_VARIABLE(gpio_display_cs, const GpioPin),
API_VARIABLE(gpio_display_di, const GpioPin),
API_VARIABLE(gpio_display_rst_n, const GpioPin),
API_VARIABLE(gpio_ext_pa4, const GpioPin),
API_VARIABLE(gpio_ext_pa6, const GpioPin),
API_VARIABLE(gpio_ext_pa7, const GpioPin),
API_VARIABLE(gpio_ext_pb2, const GpioPin),
API_VARIABLE(gpio_ext_pb3, const GpioPin),
API_VARIABLE(gpio_ext_pc0, const GpioPin),
API_VARIABLE(gpio_ext_pc1, const GpioPin),
API_VARIABLE(gpio_ext_pc3, const GpioPin),
API_VARIABLE(gpio_i2c_power_scl, const GpioPin),
API_VARIABLE(gpio_i2c_power_sda, const GpioPin),
API_VARIABLE(gpio_infrared_rx, const GpioPin),
API_VARIABLE(gpio_infrared_tx, const GpioPin),
API_VARIABLE(gpio_nfc_cs, const GpioPin),
API_VARIABLE(gpio_nfc_irq_rfid_pull, const GpioPin),
API_VARIABLE(gpio_rf_sw_0, const GpioPin),
API_VARIABLE(gpio_rfid_carrier, const GpioPin),
API_VARIABLE(gpio_rfid_carrier_out, const GpioPin),
API_VARIABLE(gpio_rfid_data_in, const GpioPin),
API_VARIABLE(gpio_sdcard_cd, const GpioPin),
API_VARIABLE(gpio_sdcard_cs, const GpioPin),
API_VARIABLE(gpio_speaker, const GpioPin),
API_VARIABLE(gpio_spi_d_miso, const GpioPin),
API_VARIABLE(gpio_spi_d_mosi, const GpioPin),
API_VARIABLE(gpio_spi_d_sck, const GpioPin),
API_VARIABLE(gpio_spi_r_miso, const GpioPin),
API_VARIABLE(gpio_spi_r_mosi, const GpioPin),
API_VARIABLE(gpio_spi_r_sck, const GpioPin),
API_VARIABLE(gpio_subghz_cs, const GpioPin),
API_VARIABLE(gpio_usart_rx, const GpioPin),
API_VARIABLE(gpio_usart_tx, const GpioPin),
API_VARIABLE(gpio_usb_dm, const GpioPin),
API_VARIABLE(gpio_usb_dp, const GpioPin),
API_VARIABLE(ibutton_gpio, const GpioPin),
API_VARIABLE(input_pins, const InputPin[]),
API_VARIABLE(input_pins_count, const size_t),
API_VARIABLE(lfrfid_protocols, const ProtocolBase*[]),
API_VARIABLE(message_blink_set_color_blue, const NotificationMessage),
API_VARIABLE(message_blink_set_color_cyan, const NotificationMessage),
API_VARIABLE(message_blink_set_color_green, const NotificationMessage),
API_VARIABLE(message_blink_set_color_magenta, const NotificationMessage),
API_VARIABLE(message_blink_set_color_red, const NotificationMessage),
API_VARIABLE(message_blink_set_color_white, const NotificationMessage),
API_VARIABLE(message_blink_set_color_yellow, const NotificationMessage),
API_VARIABLE(message_blink_start_10, const NotificationMessage),
API_VARIABLE(message_blink_start_100, const NotificationMessage),
API_VARIABLE(message_blink_stop, const NotificationMessage),
API_VARIABLE(message_blue_0, const NotificationMessage),
API_VARIABLE(message_blue_255, const NotificationMessage),
API_VARIABLE(message_click, const NotificationMessage),
API_VARIABLE(message_delay_1, const NotificationMessage),
API_VARIABLE(message_delay_10, const NotificationMessage),
API_VARIABLE(message_delay_100, const NotificationMessage),
API_VARIABLE(message_delay_1000, const NotificationMessage),
API_VARIABLE(message_delay_25, const NotificationMessage),
API_VARIABLE(message_delay_250, const NotificationMessage),
API_VARIABLE(message_delay_50, const NotificationMessage),
API_VARIABLE(message_delay_500, const NotificationMessage),
API_VARIABLE(message_display_backlight_enforce_auto, const NotificationMessage),
API_VARIABLE(message_display_backlight_enforce_on, const NotificationMessage),
API_VARIABLE(message_display_backlight_off, const NotificationMessage),
API_VARIABLE(message_display_backlight_on, const NotificationMessage),
API_VARIABLE(message_do_not_reset, const NotificationMessage),
API_VARIABLE(message_force_display_brightness_setting_1f, const NotificationMessage),
API_VARIABLE(message_force_speaker_volume_setting_1f, const NotificationMessage),
API_VARIABLE(message_force_vibro_setting_off, const NotificationMessage),
API_VARIABLE(message_force_vibro_setting_on, const NotificationMessage),
API_VARIABLE(message_green_0, const NotificationMessage),
API_VARIABLE(message_green_255, const NotificationMessage),
API_VARIABLE(message_note_a0, const NotificationMessage),
API_VARIABLE(message_note_a1, const NotificationMessage),
API_VARIABLE(message_note_a2, const NotificationMessage),
API_VARIABLE(message_note_a3, const NotificationMessage),
API_VARIABLE(message_note_a4, const NotificationMessage),
API_VARIABLE(message_note_a5, const NotificationMessage),
API_VARIABLE(message_note_a6, const NotificationMessage),
API_VARIABLE(message_note_a7, const NotificationMessage),
API_VARIABLE(message_note_a8, const NotificationMessage),
API_VARIABLE(message_note_as0, const NotificationMessage),
API_VARIABLE(message_note_as1, const NotificationMessage),
API_VARIABLE(message_note_as2, const NotificationMessage),
API_VARIABLE(message_note_as3, const NotificationMessage),
API_VARIABLE(message_note_as4, const NotificationMessage),
API_VARIABLE(message_note_as5, const NotificationMessage),
API_VARIABLE(message_note_as6, const NotificationMessage),
API_VARIABLE(message_note_as7, const NotificationMessage),
API_VARIABLE(message_note_as8, const NotificationMessage),
API_VARIABLE(message_note_b0, const NotificationMessage),
API_VARIABLE(message_note_b1, const NotificationMessage),
API_VARIABLE(message_note_b2, const NotificationMessage),
API_VARIABLE(message_note_b3, const NotificationMessage),
API_VARIABLE(message_note_b4, const NotificationMessage),
API_VARIABLE(message_note_b5, const NotificationMessage),
API_VARIABLE(message_note_b6, const NotificationMessage),
API_VARIABLE(message_note_b7, const NotificationMessage),
API_VARIABLE(message_note_b8, const NotificationMessage),
API_VARIABLE(message_note_c0, const NotificationMessage),
API_VARIABLE(message_note_c1, const NotificationMessage),
API_VARIABLE(message_note_c2, const NotificationMessage),
API_VARIABLE(message_note_c3, const NotificationMessage),
API_VARIABLE(message_note_c4, const NotificationMessage),
API_VARIABLE(message_note_c5, const NotificationMessage),
API_VARIABLE(message_note_c6, const NotificationMessage),
API_VARIABLE(message_note_c7, const NotificationMessage),
API_VARIABLE(message_note_c8, const NotificationMessage),
API_VARIABLE(message_note_cs0, const NotificationMessage),
API_VARIABLE(message_note_cs1, const NotificationMessage),
API_VARIABLE(message_note_cs2, const NotificationMessage),
API_VARIABLE(message_note_cs3, const NotificationMessage),
API_VARIABLE(message_note_cs4, const NotificationMessage),
API_VARIABLE(message_note_cs5, const NotificationMessage),
API_VARIABLE(message_note_cs6, const NotificationMessage),
API_VARIABLE(message_note_cs7, const NotificationMessage),
API_VARIABLE(message_note_cs8, const NotificationMessage),
API_VARIABLE(message_note_d0, const NotificationMessage),
API_VARIABLE(message_note_d1, const NotificationMessage),
API_VARIABLE(message_note_d2, const NotificationMessage),
API_VARIABLE(message_note_d3, const NotificationMessage),
API_VARIABLE(message_note_d4, const NotificationMessage),
API_VARIABLE(message_note_d5, const NotificationMessage),
API_VARIABLE(message_note_d6, const NotificationMessage),
API_VARIABLE(message_note_d7, const NotificationMessage),
API_VARIABLE(message_note_d8, const NotificationMessage),
API_VARIABLE(message_note_ds0, const NotificationMessage),
API_VARIABLE(message_note_ds1, const NotificationMessage),
API_VARIABLE(message_note_ds2, const NotificationMessage),
API_VARIABLE(message_note_ds3, const NotificationMessage),
API_VARIABLE(message_note_ds4, const NotificationMessage),
API_VARIABLE(message_note_ds5, const NotificationMessage),
API_VARIABLE(message_note_ds6, const NotificationMessage),
API_VARIABLE(message_note_ds7, const NotificationMessage),
API_VARIABLE(message_note_ds8, const NotificationMessage),
API_VARIABLE(message_note_e0, const NotificationMessage),
API_VARIABLE(message_note_e1, const NotificationMessage),
API_VARIABLE(message_note_e2, const NotificationMessage),
API_VARIABLE(message_note_e3, const NotificationMessage),
API_VARIABLE(message_note_e4, const NotificationMessage),
API_VARIABLE(message_note_e5, const NotificationMessage),
API_VARIABLE(message_note_e6, const NotificationMessage),
API_VARIABLE(message_note_e7, const NotificationMessage),
API_VARIABLE(message_note_e8, const NotificationMessage),
API_VARIABLE(message_note_f0, const NotificationMessage),
API_VARIABLE(message_note_f1, const NotificationMessage),
API_VARIABLE(message_note_f2, const NotificationMessage),
API_VARIABLE(message_note_f3, const NotificationMessage),
API_VARIABLE(message_note_f4, const NotificationMessage),
API_VARIABLE(message_note_f5, const NotificationMessage),
API_VARIABLE(message_note_f6, const NotificationMessage),
API_VARIABLE(message_note_f7, const NotificationMessage),
API_VARIABLE(message_note_f8, const NotificationMessage),
API_VARIABLE(message_note_fs0, const NotificationMessage),
API_VARIABLE(message_note_fs1, const NotificationMessage),
API_VARIABLE(message_note_fs2, const NotificationMessage),
API_VARIABLE(message_note_fs3, const NotificationMessage),
API_VARIABLE(message_note_fs4, const NotificationMessage),
API_VARIABLE(message_note_fs5, const NotificationMessage),
API_VARIABLE(message_note_fs6, const NotificationMessage),
API_VARIABLE(message_note_fs7, const NotificationMessage),
API_VARIABLE(message_note_fs8, const NotificationMessage),
API_VARIABLE(message_note_g0, const NotificationMessage),
API_VARIABLE(message_note_g1, const NotificationMessage),
API_VARIABLE(message_note_g2, const NotificationMessage),
API_VARIABLE(message_note_g3, const NotificationMessage),
API_VARIABLE(message_note_g4, const NotificationMessage),
API_VARIABLE(message_note_g5, const NotificationMessage),
API_VARIABLE(message_note_g6, const NotificationMessage),
API_VARIABLE(message_note_g7, const NotificationMessage),
API_VARIABLE(message_note_g8, const NotificationMessage),
API_VARIABLE(message_note_gs0, const NotificationMessage),
API_VARIABLE(message_note_gs1, const NotificationMessage),
API_VARIABLE(message_note_gs2, const NotificationMessage),
API_VARIABLE(message_note_gs3, const NotificationMessage),
API_VARIABLE(message_note_gs4, const NotificationMessage),
API_VARIABLE(message_note_gs5, const NotificationMessage),
API_VARIABLE(message_note_gs6, const NotificationMessage),
API_VARIABLE(message_note_gs7, const NotificationMessage),
API_VARIABLE(message_note_gs8, const NotificationMessage),
API_VARIABLE(message_red_0, const NotificationMessage),
API_VARIABLE(message_red_255, const NotificationMessage),
API_VARIABLE(message_sound_off, const NotificationMessage),
API_VARIABLE(message_vibro_off, const NotificationMessage),
API_VARIABLE(message_vibro_on, const NotificationMessage),
API_VARIABLE(periph_power, const GpioPin),
API_VARIABLE(sequence_audiovisual_alert, const NotificationSequence),
API_VARIABLE(sequence_blink_blue_10, const NotificationSequence),
API_VARIABLE(sequence_blink_blue_100, const NotificationSequence),
API_VARIABLE(sequence_blink_cyan_10, const NotificationSequence),
API_VARIABLE(sequence_blink_cyan_100, const NotificationSequence),
API_VARIABLE(sequence_blink_green_10, const NotificationSequence),
API_VARIABLE(sequence_blink_green_100, const NotificationSequence),
API_VARIABLE(sequence_blink_magenta_10, const NotificationSequence),
API_VARIABLE(sequence_blink_magenta_100, const NotificationSequence),
API_VARIABLE(sequence_blink_red_10, const NotificationSequence),
API_VARIABLE(sequence_blink_red_100, const NotificationSequence),
API_VARIABLE(sequence_blink_start_blue, const NotificationSequence),
API_VARIABLE(sequence_blink_start_cyan, const NotificationSequence),
API_VARIABLE(sequence_blink_start_green, const NotificationSequence),
API_VARIABLE(sequence_blink_start_magenta, const NotificationSequence),
API_VARIABLE(sequence_blink_start_red, const NotificationSequence),
API_VARIABLE(sequence_blink_start_yellow, const NotificationSequence),
API_VARIABLE(sequence_blink_stop, const NotificationSequence),
API_VARIABLE(sequence_blink_white_100, const NotificationSequence),
API_VARIABLE(sequence_blink_yellow_10, const NotificationSequence),
API_VARIABLE(sequence_blink_yellow_100, const NotificationSequence),
API_VARIABLE(sequence_charged, const NotificationSequence),
API_VARIABLE(sequence_charging, const NotificationSequence),
API_VARIABLE(sequence_display_backlight_enforce_auto, const NotificationSequence),
API_VARIABLE(sequence_display_backlight_enforce_on, const NotificationSequence),
API_VARIABLE(sequence_display_backlight_off, const NotificationSequence),
API_VARIABLE(sequence_display_backlight_off_delay_1000, const NotificationSequence),
API_VARIABLE(sequence_display_backlight_on, const NotificationSequence),
API_VARIABLE(sequence_double_vibro, const NotificationSequence),
API_VARIABLE(sequence_error, const NotificationSequence),
API_VARIABLE(sequence_not_charging, const NotificationSequence),
API_VARIABLE(sequence_reset_blue, const NotificationSequence),
API_VARIABLE(sequence_reset_display, const NotificationSequence),
API_VARIABLE(sequence_reset_green, const NotificationSequence),
API_VARIABLE(sequence_reset_red, const NotificationSequence),
API_VARIABLE(sequence_reset_rgb, const NotificationSequence),
API_VARIABLE(sequence_reset_sound, const NotificationSequence),
API_VARIABLE(sequence_reset_vibro, const NotificationSequence),
API_VARIABLE(sequence_set_blue_255, const NotificationSequence),
API_VARIABLE(sequence_set_green_255, const NotificationSequence),
API_VARIABLE(sequence_set_only_blue_255, const NotificationSequence),
API_VARIABLE(sequence_set_only_green_255, const NotificationSequence),
API_VARIABLE(sequence_set_only_red_255, const NotificationSequence),
API_VARIABLE(sequence_set_red_255, const NotificationSequence),
API_VARIABLE(sequence_set_vibro_on, const NotificationSequence),
API_VARIABLE(sequence_single_vibro, const NotificationSequence),
API_VARIABLE(sequence_solid_yellow, const NotificationSequence),
API_VARIABLE(sequence_success, const NotificationSequence),
API_VARIABLE(subghz_protocol_raw, const SubGhzProtocol),
API_VARIABLE(subghz_protocol_raw_decoder, const SubGhzProtocolDecoder),
API_VARIABLE(subghz_protocol_raw_encoder, const SubGhzProtocolEncoder),
API_VARIABLE(subghz_protocol_registry, const SubGhzProtocolRegistry),
API_VARIABLE(u8g2_font_7x13B_tr, const uint8_t[]),
API_VARIABLE(u8g2_font_courB08_tn, const uint8_t[]),
API_VARIABLE(u8g2_font_inb27_mr, const uint8_t[]),
API_VARIABLE(u8g2_font_open_iconic_arrow_2x_t, const uint8_t[]),
API_VARIABLE(usb_cdc_dual, FuriHalUsbInterface),
API_VARIABLE(usb_cdc_single, FuriHalUsbInterface),
API_VARIABLE(usb_hid, FuriHalUsbInterface),
API_VARIABLE(usb_hid_u2f, FuriHalUsbInterface),
API_VARIABLE(usbd_devfs, const usbd_driver),
API_VARIABLE(vibro_gpio, const GpioPin)
));